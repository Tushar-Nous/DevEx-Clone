[
  {
    "input": "I need the system ability to ingest bureau rating algorithms. I will import filing to create rating calculation using AI and leverage machine learning for premium calculations. The objective of the requirement is to automate the process of interpreting insurer-submitted rate filing documents (PDFs) and converting them into executable rating logic using AI",
    "guidelines": "Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an enterprise application to automate the interpretation of insurer-submitted rate filing documents (PDFs) using AI. The system should ingest bureau rating algorithms, import filings to generate rating calculations with AI, and utilize machine learning for premium calculations.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Implement company logo with minimum 24px height for web\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings\n- **Brand Voice**: Maintain professional, trustworthy, and approachable tone in UI copy\n- **Typography Hierarchy**: Establish clear heading levels (H1-H6) with consistent font weights and sizes\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessibility-compliant contrast ratios\n- **Semantic Colors**: Success (green), Warning (amber), Error (red), Info (blue)\n- **Neutral Palette**: Grays for backgrounds, borders, and text (minimum 9 shades)\n- **Contrast Requirements**: Ensure WCAG AA compliance for text readability\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose enterprise-grade typeface for readability\n- **Font Weights**: Regular, Medium, Semi-bold, Bold for hierarchy\n- **Line Heights**: Maintain readability with appropriate spacing\n- **Font Sizes**: Establish a scalable range for various text elements\n\n### Text Hierarchy\n- **H1-H6**: Define clear heading levels for content organization\n- **Body Text**: Ensure legibility and readability for all users\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop, Tablet, Mobile**: Define responsive grid systems for different devices\n- **Container Max-width**: Optimize layout for readability and usability\n- **Spacing System**: Establish consistent padding and margins for UI elements\n\n## 4. Component Library Specifications\n\n### AI Integration Components\n\n#### Data Ingestion\n- **File Import**: Enable uploading and processing of insurer-submitted rate filing documents\n- **Algorithm Integration**: Ingest bureau rating algorithms for calculation\n\n#### Rating Logic Generation\n- **AI Processing**: Convert PDF filings into executable rating logic\n- **Machine Learning**: Utilize ML for premium calculations and automation\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Ensure readability for all users\n- **Color Independence**: Use color as a supplement, not the sole indicator\n\n### Keyboard Navigation\n- **Accessibility**: Support keyboard navigation for all interactive elements\n- **Focus Indicators**: Provide visible focus states for enhanced usability\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile-First Approach**: Design for smaller screens first, then scale up\n- **Responsive Layout**: Ensure compatibility across various devices\n\n## 7. Interaction and Animation Guidelines\n\n### User Feedback\n- **Feedback Mechanisms**: Provide clear feedback during AI processing\n- **Loading States**: Use animations to indicate system activity\n\n## 8. Icon System\n\n### Functional Icons\n- **Meaningful Icons**: Use icons to enhance user understanding\n- **Accessibility**: Provide alt text for icons for screen reader users\n\n## 9. Content Guidelines\n\n### Clarity and Consistency\n- **Clear Instructions**: Guide users through the AI processing steps\n- **Inclusive Language**: Ensure all users can understand the system\n\n## 10. Performance Considerations\n\n### Optimization\n- **Efficient Processing**: Optimize system performance for AI calculations\n- **Asset Management**: Manage resources effectively for smooth operation\n\n## 11. Quality Assurance Checklist\n\n### Testing\n- **Functionality Testing**: Ensure all AI components work as intended\n- **Accessibility Testing**: Verify WCAG compliance for all features\n- **Performance Testing**: Optimize system speed and responsiveness\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Structure components for easy access and reuse\n2. **Responsive Design**: Implement layouts for different screen sizes\n3. **Accessibility Features**: Include keyboard navigation and focus states\n4. **Testing Environment**: Create test scenarios to validate AI functionality\n5. **Documentation**: Provide clear guidelines for system usage and AI integration\n\n---",
    "type": "design_guidelines",
    "id": 1,
    "timestamp": "2025-08-25T14:02:47.604077"
  },
  {
    "input": "I require an intelligent insurance claims processing system that automates claim evaluation, fraud detection, and settlement processes. The system should include:\n\n• Automated claim intake from multiple channels (web, mobile, phone, email)\n• AI-powered damage assessment using image recognition and ML algorithms\n• Integration with third-party assessors, repair shops, and medical providers\n• Real-time fraud detection using pattern analysis and risk scoring\n• Workflow automation for claim routing, approval, and settlement\n• Customer communication portal with status updates and document sharing\n• Integration with policy management systems for coverage verification\n• Regulatory compliance for insurance industry standards\n• Analytics dashboard for claim trends, fraud patterns, and performance metrics\n• Mobile app for field adjusters with offline capability\n• Automated payment processing and settlement reconciliation\n\nThe system must handle high claim volumes, ensure regulatory compliance, and provide excellent customer experience throughout the claims lifecycle.",
    "guidelines": "# Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an advanced insurance claims processing system that streamlines claim evaluation, fraud detection, and settlement processes. The system aims to automate claim intake, enhance damage assessment with AI, integrate with third parties, ensure fraud detection, automate workflows, provide customer communication, comply with regulations, offer analytics insights, and support mobile field adjusters.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the company logo with a minimum height of 24px for web.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings.\n- **Brand Voice**: Maintain a professional, trustworthy, and approachable tone in UI copy.\n- **Typography Hierarchy**: Establish clear heading levels (H1-H6) with consistent font weights and sizes.\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessible contrast ratios.\n- **Semantic Colors**: Assign colors for Success (green), Warning (amber), Error (red), Info (blue).\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure WCAG AA compliance for text contrast ratios.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface, system fonts recommended for performance.\n- **Font Weights**: Specify Regular (400), Medium (500), Semi-bold (600), Bold (700).\n- **Line Heights**: Set to 1.2 for headings, 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px).\n- **H2**: Apply for section headers (24-32px).\n- **H3**: Utilize for subsection headers (20-24px).\n- **Body**: Primary content text size (14-16px).\n- **Caption**: Supporting text size (12-14px).\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins.\n- **Tablet**: Utilize an 8-column grid with 20px gutters.\n- **Mobile**: Employ a 4-column grid with 16px gutters.\n- **Container Max-width**: Set to 1200px for optimal readability.\n\n### Spacing System\n- **Base Unit**: Use 8px increments for consistent spacing.\n- **Component Padding**: Maintain internal spacing for visual consistency.\n- **Section Margins**: Ensure a vertical rhythm between content blocks.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n\n#### Primary Navigation\n- **Desktop**: Horizontal top navigation with dropdown menus.\n- **Mobile**: Hamburger menu with slide-out drawer.\n- **Active States**: Provide clear visual indication of the current page/section.\n- **Accessibility**: Ensure proper ARIA labels and keyboard navigation support.\n\n#### Breadcrumbs\n- **Format**: Display as Home > Section > Subsection > Current Page.\n- **Separators**: Use forward slash (/) or chevron (>) for clarity.\n- **Clickable Elements**: Allow interaction with all elements except the current page.\n\n### Form Components\n\n#### Input Fields\n- **Height**: Maintain a minimum of 44px for touch targets.\n- **States**: Include Default, Focus, Error, Disabled, Success states.\n- **Labels**: Keep labels always visible and positioned above inputs.\n- **Placeholder Text**: Provide helpful examples, not instructions.\n- **Error Messaging**: Offer clear and actionable feedback below inputs.\n\n#### Buttons\n- **Primary Button**: High contrast for main actions.\n- **Secondary Button**: Lower contrast for secondary actions.\n- **Tertiary Button**: Text-only for less critical actions.\n- **Sizes**: Offer Small (32px), Medium (40px), Large (48px) options.\n- **States**: Include Default, Hover, Active, Disabled, Loading states.\n\n#### Form Validation\n- **Inline Validation**: Provide real-time feedback for individual fields.\n- **Error Prevention**: Implement input constraints and helpful formatting.\n- **Success States**: Confirm correct inputs with positive feedback.\n\n### Data Display Components\n\n#### Tables\n- **Header Styling**: Use bold text and background color differentiation.\n- **Row Styling**: Alternate backgrounds for readability.\n- **Sorting**: Include clear visual indicators for sortable columns.\n- **Pagination**: Display entries info and navigation controls.\n- **Responsive**: Ensure responsiveness on mobile screens.\n\n#### Cards\n- **Shadow Elevation**: Apply subtle drop shadows (2-4px blur).\n- **Border Radius**: Maintain consistent corner rounding (4-8px).\n- **Content Hierarchy**: Clearly define title, body, and action areas.\n- **Hover States**: Provide subtle elevation or border changes for interactivity.\n\n### Feedback Components\n\n#### Alerts and Notifications\n- **Success**: Use green background with checkmark icon.\n- **Warning**: Apply amber background with warning icon.\n- **Error**: Utilize red background with error icon.\n- **Info**: Display blue background with info icon.\n- **Positioning**: Show toast notifications in the top-right corner and inline alerts contextually.\n\n#### Loading States\n- **Skeleton Screens**: Use gray placeholders matching content structure.\n- **Progress Indicators**: Linear for known progress, circular for unknown.\n- **Spinners**: Use sparingly, prefer skeleton screens for loading feedback.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Test all color combinations for accessibility.\n- **Color Independence**: Avoid relying solely on color to convey information.\n- **Focus Indicators**: Ensure visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- **Tab Order**: Establish a logical flow through interactive elements.\n- **Skip Links**: Include \"Skip to main content\" for screen readers.\n- **Escape Functionality**: Enable closing modals and dropdowns with the Escape key.\n\n### Screen Reader Support\n- **ARIA Labels**: Provide descriptive labels for interactive elements.\n- **Heading Structure**: Maintain a proper H1-H6 hierarchy for screen readers.\n- **Alt Text**: Include meaningful descriptions for images and icons.\n- **Form Labels**: Explicitly associate labels with form controls.\n\n### Motor Accessibility\n- **Touch Targets**: Ensure a minimum of 44px x 44px clickable areas.\n- **Spacing**: Provide adequate space between interactive elements.\n- **Timeout Warnings**: Implement warnings for sessions with time limits.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile**: Range from 320px to 767px.\n- **Tablet**: Range from 768px to 1023px.\n- **Desktop**: Range from 1024px to 1199px.\n- **Large Desktop**: 1200px and above.\n\n### Mobile-First Approach\n- **Progressive Enhancement**: Begin with mobile design and enhance for larger screens.\n- **Touch Interactions**: Incorporate swipe gestures, tap targets, and thumb-friendly navigation.\n- **Content Priority**: Ensure essential content is visible without scrolling.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- **Duration**: Set transitions to 200-300ms for smooth animations.\n- **Easing**: Use ease-out for entrances and ease-in for exits.\n- **Button Feedback**: Provide subtle scale or color changes on interaction.\n- **Form Feedback**: Ensure smooth transitions between states.\n\n### Page Transitions\n- **Loading States**: Display progress for actions taking more than 1 second.\n- **Content Updates**: Use smooth fade or slide transitions for content changes.\n- **Error Handling**: Offer clear visual feedback without abrupt interruptions.\n\n## 8. Icon System\n\n### Icon Library\n- **Style**: Maintain consistent stroke width and corner radius.\n- **Sizes**: Provide standard sizes of 16px, 20px, 24px, 32px.\n- **Usage**: Use functional icons for navigation, sparingly for decorative purposes.\n- **Accessibility**: Include Alt text or ARIA labels for meaningful icons.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- **Clarity**: Use simple, direct language for better understanding.\n- **Consistency**: Employ standard terminology across the application.\n- **Actionable**: Provide clear next steps for users.\n- **Inclusive**: Ensure gender-neutral and accessible language.\n\n### Error Messages\n- **Specific**: Explain precisely what went wrong in error messages.\n- **Helpful**: Offer steps to resolve issues in a user-friendly manner.\n- **Human**: Avoid technical jargon in error messages.\n- **Positioning**: Display error messages near relevant inputs or actions.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- **Formats**: Opt for WebP with fallbacks, SVG for icons.\n- **Sizing**: Provide multiple resolutions for different screen densities.\n- **Lazy Loading**: Implement for images below the fold.\n\n### Asset Management\n- **Component Reusability**: Maximize reuse of design components.\n- **Consistent Naming**: Use clear, descriptive names for all elements.\n- **Style Organization**: Group colors, typography, and spacing logically.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Ensure all components adhere to the established design system.\n- [ ] Verify color contrast meets WCAG AA standards.\n- [ ] Confirm interactive elements meet minimum size requirements.\n- [ ] Maintain consistency in typography hierarchy.\n- [ ] Define responsive behavior for all breakpoints.\n\n### Accessibility Audit\n- [ ] Validate keyboard navigation for all interactive elements.\n- [ ] Verify screen reader compatibility.\n- [ ] Check for color-blind friendly color combinations.\n- [ ] Provide alternative text for all images.\n- [ ] Associate form labels correctly.\n\n### Brand Consistency\n- [ ] Adhere to brand guidelines for logo usage.\n- [ ] Match color palette with brand standards.\n- [ ] Reflect brand personality in typography.\n- [ ] Maintain consistent voice and tone throughout the application.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Develop example pages showcasing components in context.",
    "type": "design_guidelines",
    "id": 2,
    "timestamp": "2025-08-25T14:22:00.979639"
  },
  {
    "input": "I need the system ability to ingest bureau rating algorithms. I will import filing to create rating calculation using AI and leverage machine learning for premium calculations. The objective of the requirement is to automate the process of interpreting insurer-submitted rate filing documents (PDFs) and converting them into executable rating logic using AI",
    "guidelines": "Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an enterprise application to automate the interpretation of insurer-submitted rate filing documents (PDFs) using AI. The system should ingest bureau rating algorithms, import filings to create rating calculations, and leverage machine learning for premium calculations.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Implement company logo with minimum 24px height for web\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings\n- **Brand Voice**: Maintain professional, trustworthy, and approachable tone in UI copy\n- **Typography Hierarchy**: Establish clear heading levels (H1-H6) for consistency\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessible contrast ratios\n- **Semantic Colors**: Success (green), Warning (amber), Error (red), Info (blue)\n- **Neutral Palette**: Use grays for backgrounds, borders, and text (minimum 9 shades)\n- **Contrast Requirements**: Ensure WCAG AA compliance for text readability\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose enterprise-grade typeface for readability\n- **Font Weights**: Include Regular (400), Medium (500), Semi-bold (600), Bold (700)\n- **Line Heights**: Maintain 1.2 for headings, 1.4-1.6 for body text\n- **Font Sizes**: Establish an 8-point scale for consistency\n\n### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px)\n- **H2**: Utilize for section headers (24-32px)\n- **H3**: Apply for subsection headers (20-24px)\n- **Body**: Use for primary content (14-16px)\n- **Caption**: Utilize for supporting text (12-14px)\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins\n- **Tablet**: Use an 8-column grid with 20px gutters\n- **Mobile**: Apply a 4-column grid with 16px gutters\n- **Container Max-width**: Set to 1200px for optimal readability\n\n### Spacing System\n- **Base Unit**: Use 8px increments for consistent spacing\n- **Component Padding**: Ensure internal spacing for visual consistency\n- **Section Margins**: Maintain vertical rhythm between content blocks\n\n## 4. Component Library Specifications\n\n### Data Processing Components\n\n#### AI Integration\n- **Ingestion**: Ability to import bureau rating algorithms\n- **Processing**: Convert insurer-submitted rate filing documents into executable rating logic\n- **AI Utilization**: Leverage machine learning for premium calculations\n\n### Document Interpretation Components\n\n#### PDF Import\n- **File Ingestion**: Import insurer-submitted rate filing documents (PDFs)\n- **Interpretation**: Automate the interpretation process using AI algorithms\n- **Conversion**: Convert PDF content into executable rating logic\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Ensure all color combinations meet accessibility standards\n- **Color Independence**: Avoid relying solely on color to convey information\n- **Focus Indicators**: Provide visible focus states for keyboard navigation\n\n### Keyboard Navigation\n- **Tab Order**: Establish a logical flow through interactive elements\n- **Skip Links**: Include \"Skip to main content\" for screen readers\n- **Escape Functionality**: Allow closing modals and dropdowns with the Escape key\n\n### Screen Reader Support\n- **ARIA Labels**: Provide descriptive labels for interactive elements\n- **Heading Structure**: Maintain proper H1-H6 hierarchy for screen readers\n- **Alt Text**: Include meaningful descriptions for images and icons\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile**: 320px - 767px\n- **Tablet**: 768px - 1023px\n- **Desktop**: 1024px - 1199px\n- **Large Desktop**: 1200px+\n\n### Mobile-First Approach\n- **Content Priority**: Ensure important content is visible without scrolling\n- **Touch Interactions**: Optimize for swipe gestures and tap targets\n\n## 7. Interaction and Animation Guidelines\n\n### AI Processing Feedback\n- **Loading States**: Provide visual feedback during document processing\n- **Micro-interactions**: Use subtle animations for user feedback\n\n## 8. Icon System\n\n### Icon Usage\n- **Functional Icons**: Use icons to represent different document processing stages\n- **Accessibility**: Include alt text or ARIA labels for icons\n\n## 9. Content Guidelines\n\n### Error Handling\n- **Clear Messaging**: Provide specific and actionable error messages\n- **Human Language**: Avoid technical jargon in error notifications\n\n## 10. Performance Considerations\n\n### Processing Efficiency\n- **Optimization**: Ensure efficient processing of rate filing documents\n- **Resource Management**: Optimize AI and machine learning algorithms for performance\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Ensure components align with design system requirements\n- [ ] Verify color contrast for readability\n- [ ] Test interactive elements for accessibility\n- [ ] Confirm responsive behavior across breakpoints\n\n### Accessibility Audit\n- [ ] Test keyboard navigation for all components\n- [ ] Verify screen reader compatibility\n- [ ] Check color-blind friendly color combinations\n- [ ] Provide alternative text for all document-related images\n\n### Brand Consistency\n- [ ] Maintain brand guidelines in design elements\n- [ ] Ensure typography reflects brand identity\n- [ ] Maintain consistent voice and tone in messaging\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a structured component library for document processing\n2. **Auto-layout Usage**: Implement responsive design using Figma's auto-layout features\n3. **Style Management**: Utilize Figma styles for consistent design elements\n4. **Documentation**: Include usage guidelines within component descriptions\n5. **Testing**: Create example pages to showcase document processing components\n\n---",
    "type": "design_guidelines",
    "id": 3,
    "timestamp": "2025-08-25T14:24:43.433649"
  },
  {
    "input": "I need a comprehensive banking system that handles customer account management, transaction processing, and regulatory compliance. The system should support:\n\n• Multi-currency account management with real-time balance tracking\n• Secure transaction processing with fraud detection mechanisms\n• Integration with payment gateways and interbank networks\n• Regulatory compliance for KYC, AML, and financial reporting\n• Real-time transaction monitoring and alerts\n• Customer onboarding with digital identity verification\n• Loan origination and management workflows\n• Credit scoring and risk assessment capabilities\n• Automated reporting for regulatory bodies\n• Mobile and web banking interfaces with strong authentication\n\nThe system must ensure ACID compliance, handle high transaction volumes, and maintain audit trails for all financial operations.",
    "guidelines": "# Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop a robust banking system that encompasses customer account management, transaction processing, and regulatory compliance. The system should facilitate multi-currency account management, secure transactions, regulatory adherence, real-time monitoring, and seamless customer experiences across web and mobile platforms.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the bank's logo with a minimum size of 24px for web applications.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes reflecting trust and professionalism.\n- **Brand Voice**: Maintain a tone that is professional, trustworthy, and reassuring.\n- **Typography Hierarchy**: Establish consistent heading levels (H1-H6) for clear information hierarchy.\n\n### Color System\n- **Primary Colors**: Define accessible primary colors with semantic meanings for alerts and notifications.\n- **Semantic Colors**: Assign colors like green for success, red for error, etc., for clear communication.\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text to ensure readability.\n- **Contrast Requirements**: Ensure all text meets WCAG AA standards for accessibility.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose a system font for optimal performance and readability.\n- **Font Weights**: Define font weights for headings and body text to maintain consistency.\n- **Line Heights**: Establish appropriate line heights for different text elements.\n- **Font Sizes**: Create a scalable font scale for various text sizes.\n\n### Text Hierarchy\n- Define clear text hierarchy with distinct styles for headings, body text, and captions.\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- Establish responsive grid systems for desktop, tablet, and mobile views.\n- Define container max-width for optimal content presentation.\n\n### Spacing System\n- Implement a consistent spacing system for internal padding and section margins.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n- Design primary and mobile navigation components with clear active states and accessibility features.\n- Ensure proper ARIA labels and keyboard navigation support.\n\n### Form Components\n- Define input field specifications, button styles, and form validation requirements.\n- Ensure input field heights, states, labels, and error messaging are consistent.\n\n### Data Display Components\n- Design tables, cards, and feedback components with clear styling and interactions.\n- Ensure tables are responsive and cards have appropriate shadow and border radius.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- Test and ensure all color combinations meet accessibility standards.\n- Provide visible focus indicators for keyboard navigation.\n\n### Keyboard Navigation\n- Establish logical tab orders and include skip links for screen readers.\n- Ensure proper escape functionality for modals and dropdowns.\n\n### Screen Reader Support\n- Include descriptive ARIA labels, proper heading structures, and meaningful alt text.\n- Associate form labels explicitly with form controls.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- Define breakpoints for mobile, tablet, desktop, and large desktop views.\n- Implement a mobile-first approach for progressive enhancement.\n\n### Mobile-First Approach\n- Prioritize content visibility on smaller screens and enhance for larger devices.\n- Optimize touch interactions and ensure content priority without excessive scrolling.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- Define durations, easing, and feedback for button and form interactions.\n- Ensure smooth transitions for page loading and content updates.\n\n### Page Transitions\n- Implement loading states, content transitions, and error handling with clear feedback.\n\n## 8. Icon System\n\n### Icon Library\n- Establish a consistent icon style, sizes, and usage guidelines.\n- Ensure icons have meaningful alt text or ARIA labels for accessibility.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- Maintain clear, consistent, actionable, and inclusive language in all content.\n- Craft error messages that are specific, helpful, human, and well-positioned.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- Optimize images with appropriate formats, sizes, and lazy loading techniques.\n- Manage assets for maximum reusability and consistent naming conventions.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- Ensure design components align with the established system and meet accessibility standards.\n- Define responsive behaviors for all breakpoints and interactive elements.\n\n### Accessibility Audit\n- Verify keyboard navigation, screen reader compatibility, color-blind friendly designs, and alt text usage.\n- Confirm brand consistency in logo usage, color palette adherence, and typography alignment.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a comprehensive component library with all variants and states.\n2. **Auto-layout Usage**: Utilize Figma's auto-layout features for responsive design implementation.\n3. **Style Management**: Employ Figma styles for consistent colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions for easy reference.\n5. **Testing**: Develop example pages to showcase components in various contexts for thorough testing and validation.",
    "type": "design_guidelines",
    "id": 4,
    "timestamp": "2025-08-25T14:31:59.508625"
  },
  {
    "input": "I need a Medicare management system that handles beneficiary enrollment, claims processing, and provider network management. The system should provide:\n\n• Beneficiary enrollment and eligibility verification with Medicare databases\n• Claims processing workflow with CMS compliance and validation\n• Provider credentialing and network management capabilities\n• Prior authorization workflows for medical procedures and medications\n• Integration with Electronic Health Records (EHR) systems\n• Medicare Advantage plan management and coordination of benefits\n• Prescription drug coverage (Part D) administration\n• Quality reporting and Star Ratings compliance\n• Member portal for benefit information, claims status, and provider search\n• Provider portal for claims submission, status tracking, and payments\n• Analytics for utilization patterns, cost management, and fraud detection\n• HIPAA-compliant data handling and security measures\n\nThe system must integrate with CMS systems, handle complex Medicare regulations, and ensure accurate benefit administration while maintaining member satisfaction.",
    "guidelines": "# Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop a comprehensive Medicare management system that streamlines beneficiary enrollment, claims processing, and provider network management. The system aims to enhance operational efficiency, ensure CMS compliance, and deliver a seamless user experience for beneficiaries, providers, and administrators.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate a professional logo representing the Medicare management system.\n- **Brand Colors**: Define a color palette reflecting trust, reliability, and compliance with Medicare standards.\n- **Brand Voice**: Maintain a tone that instills confidence, clarity, and professionalism in all system communications.\n- **Typography Hierarchy**: Establish a consistent hierarchy for headings and content to aid readability and navigation.\n\n### Color System\n- **Primary Colors**: Select colors that align with Medicare guidelines and ensure accessibility for all users.\n- **Semantic Colors**: Use color codes like green for success, red for errors, and blue for information alerts.\n- **Neutral Palette**: Employ neutral shades for backgrounds, text, and borders to maintain visual balance.\n- **Contrast Requirements**: Ensure all color combinations meet WCAG AA standards for readability.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose a legible typeface suitable for enterprise applications.\n- **Font Weights**: Define font weights for various text elements to establish hierarchy and emphasis.\n- **Line Heights**: Set appropriate line spacing for readability across different text sizes.\n- **Font Sizes**: Establish a scalable font scale for consistent text presentation.\n\n### Text Hierarchy\n- **H1-H6**: Define clear heading levels for different sections of the Medicare management system.\n- **Body Text**: Ensure readability and accessibility of content for all users.\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop, Tablet, Mobile**: Design responsive grids for optimal layout across devices.\n- **Container Max-width**: Define maximum widths for content containers to ensure readability.\n\n### Spacing System\n- **Base Unit**: Establish a consistent spacing unit for layout and component alignment.\n- **Component Padding**: Maintain internal spacing for visual consistency.\n- **Section Margins**: Define vertical spacing between content sections for improved readability.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n\n#### Primary Navigation\n- **Desktop, Mobile**: Design intuitive navigation menus for easy access to system features.\n- **Active States**: Provide clear visual cues for active menu items.\n- **Accessibility**: Ensure navigation elements are keyboard accessible and have proper ARIA labels.\n\n### Form Components\n\n#### Input Fields\n- **Height**: Set minimum touch target sizes for input fields.\n- **States**: Define visual states for input fields (default, focus, error, disabled, success).\n- **Labels**: Position labels effectively for improved form usability.\n- **Placeholder Text**: Use placeholders as examples, not instructions.\n- **Error Messaging**: Provide clear and actionable feedback for input errors.\n\n#### Buttons\n- **Primary, Secondary, Tertiary Buttons**: Design buttons with varying levels of importance and actions.\n- **Sizes**: Define button sizes for different contexts.\n- **States**: Establish visual states for buttons to indicate interactivity.\n\n### Data Display Components\n\n#### Tables\n- **Header, Row Styling**: Differentiate table elements for improved readability.\n- **Sorting, Pagination**: Include sorting options and pagination controls for data organization.\n- **Responsive**: Ensure tables adapt to different screen sizes for optimal viewing.\n\n#### Cards\n- **Shadow Elevation, Border Radius**: Design cards with consistent styling for a cohesive look.\n- **Content Hierarchy**: Organize card content effectively for easy scanning.\n- **Hover States**: Provide visual feedback for interactive card elements.\n\n### Feedback Components\n\n#### Alerts and Notifications\n- **Success, Warning, Error, Info**: Design alerts with distinct colors and icons for different message types.\n- **Positioning**: Strategically place notifications for user attention.\n\n#### Loading States\n- **Skeleton Screens, Progress Indicators, Spinners**: Use loading indicators effectively to manage user expectations.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Ensure all color combinations meet accessibility standards.\n- **Color Independence**: Use color and other indicators for conveying information.\n- **Focus Indicators**: Provide visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- **Tab Order, Skip Links, Escape Functionality**: Implement keyboard navigation features for enhanced accessibility.\n\n### Screen Reader Support\n- **ARIA Labels, Heading Structure, Alt Text, Form Labels**: Optimize the system for screen reader compatibility.\n\n### Motor Accessibility\n- **Touch Targets, Spacing, Timeout Warnings**: Design interactive elements with consideration for touch interactions and user mobility.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile, Tablet, Desktop, Large Desktop**: Design layouts that adapt to various screen sizes.\n\n### Mobile-First Approach\n- **Progressive Enhancement, Touch Interactions, Content Priority**: Prioritize mobile design for seamless user experience.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- **Duration, Easing, Button Feedback, Form Feedback**: Enhance user interactions with subtle animations and feedback.\n\n### Page Transitions\n- **Loading States, Content Updates, Error Handling**: Implement smooth transitions and feedback mechanisms for user engagement.\n\n## 8. Icon System\n\n### Icon Library\n- **Style, Sizes, Usage, Accessibility**: Utilize icons consistently for navigation and visual cues.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- **Clarity, Consistency, Actionable, Inclusive**: Ensure content is clear, consistent, actionable, and inclusive.\n\n### Error Messages\n- **Specific, Helpful, Human, Positioning**: Craft error messages that guide users effectively.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- **Formats, Sizing, Lazy Loading**: Optimize images for performance and loading speed.\n\n### Asset Management\n- **Component Reusability, Consistent Naming, Style Organization**: Organize assets for efficient design management.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Design system consistency check.\n- [ ] Accessibility compliance review.\n- [ ] Responsive behavior validation.\n\n### Accessibility Audit\n- [ ] Keyboard navigation testing.\n- [ ] Screen reader compatibility assessment.\n- [ ] Color-blind friendly design evaluation.\n\n### Brand Consistency\n- [ ] Logo adherence to brand guidelines.\n- [ ] Color palette consistency.\n- [ ] Typography alignment with brand voice.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for design consistency.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Validate design components with example pages for contextual understanding.",
    "type": "design_guidelines",
    "id": 5,
    "timestamp": "2025-08-25T14:34:54.130963"
  },
  {
    "input": "I require an intelligent insurance claims processing system that automates claim evaluation, fraud detection, and settlement processes. The system should include:\n\n• Automated claim intake from multiple channels (web, mobile, phone, email)\n• AI-powered damage assessment using image recognition and ML algorithms\n• Integration with third-party assessors, repair shops, and medical providers\n• Real-time fraud detection using pattern analysis and risk scoring\n• Workflow automation for claim routing, approval, and settlement\n• Customer communication portal with status updates and document sharing\n• Integration with policy management systems for coverage verification\n• Regulatory compliance for insurance industry standards\n• Analytics dashboard for claim trends, fraud patterns, and performance metrics\n• Mobile app for field adjusters with offline capability\n• Automated payment processing and settlement reconciliation\n\nThe system must handle high claim volumes, ensure regulatory compliance, and provide excellent customer experience throughout the claims lifecycle.",
    "guidelines": "# Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an advanced insurance claims processing system that streamlines claim evaluation, fraud detection, and settlement processes. The system aims to automate claim intake, enhance damage assessment with AI, integrate with third parties, ensure fraud detection, automate workflows, provide customer communication, comply with regulations, offer analytics insights, support field adjusters, and manage payments efficiently.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the company logo with a minimum height of 24px for web.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings.\n- **Brand Voice**: Maintain a professional, trustworthy, and approachable tone in UI copy.\n- **Typography Hierarchy**: Establish consistent heading levels (H1-H6) with clear font weights and sizes.\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessible contrast ratios.\n- **Semantic Colors**: Assign colors for Success (green), Warning (amber), Error (red), Info (blue).\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure WCAG AA compliance for text contrast ratios.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface, with system fonts recommended for performance.\n- **Font Weights**: Specify Regular (400), Medium (500), Semi-bold (600), Bold (700).\n- **Line Heights**: Set 1.2 for headings and 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px).\n- **H2**: Apply for section headers (24-32px).\n- **H3**: Utilize for subsection headers (20-24px).\n- **Body**: Use for primary content (14-16px).\n- **Caption**: Employ for supporting text (12-14px).\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins.\n- **Tablet**: Utilize an 8-column grid with 20px gutters.\n- **Mobile**: Opt for a 4-column grid with 16px gutters.\n- **Container Max-width**: Set at 1200px for optimal readability.\n\n### Spacing System\n- **Base Unit**: Use 8px increments for spacing consistency.\n- **Component Padding**: Define internal spacing for component consistency.\n- **Section Margins**: Establish vertical rhythm between content blocks.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n\n#### Primary Navigation\n- **Desktop**: Horizontal top navigation with dropdown menus.\n- **Mobile**: Hamburger menu with slide-out drawer.\n- **Active States**: Ensure clear visual indication of the current page/section.\n- **Accessibility**: Provide proper ARIA labels and support keyboard navigation.\n\n#### Breadcrumbs\n- **Format**: Display as Home > Section > Subsection > Current Page.\n- **Separators**: Use forward slash (/) or chevron (>) for clarity.\n- **Clickable Elements**: Allow all except the current page.\n\n### Form Components\n\n#### Input Fields\n- **Height**: Maintain a minimum of 44px for touch targets.\n- **States**: Include Default, Focus, Error, Disabled, Success states.\n- **Labels**: Keep labels always visible and positioned above inputs.\n- **Placeholder Text**: Provide helpful examples, not instructions.\n- **Error Messaging**: Offer clear, actionable feedback below inputs.\n\n#### Buttons\n- **Primary Button**: High contrast for main actions.\n- **Secondary Button**: Lower contrast for secondary actions.\n- **Tertiary Button**: Text-only for less critical actions.\n- **Sizes**: Offer Small (32px), Medium (40px), Large (48px) options.\n- **States**: Define Default, Hover, Active, Disabled, Loading states.\n\n#### Form Validation\n- **Inline Validation**: Provide real-time feedback for individual fields.\n- **Error Prevention**: Implement input constraints and helpful formatting.\n- **Success States**: Confirm correct inputs with positive feedback.\n\n### Data Display Components\n\n#### Tables\n- **Header Styling**: Bold text with background color differentiation.\n- **Row Styling**: Use alternating backgrounds for readability.\n- **Sorting**: Include clear visual indicators for sortable columns.\n- **Pagination**: Display entries info and navigation controls.\n- **Responsive**: Ensure responsiveness on mobile devices.\n\n#### Cards\n- **Shadow Elevation**: Apply subtle drop shadows (2-4px blur).\n- **Border Radius**: Maintain consistent corner rounding (4-8px).\n- **Content Hierarchy**: Clearly define title, body, and action areas.\n- **Hover States**: Provide subtle elevation or border changes for interaction.\n\n### Feedback Components\n\n#### Alerts and Notifications\n- **Success**: Use green background with checkmark icon.\n- **Warning**: Utilize amber background with warning icon.\n- **Error**: Apply red background with error icon.\n- **Info**: Display blue background with info icon.\n- **Positioning**: Position toast notifications in the top-right and inline alerts contextually.\n\n#### Loading States\n- **Skeleton Screens**: Implement gray placeholders matching content structure.\n- **Progress Indicators**: Use linear for known progress and circular for unknown.\n- **Spinners**: Use sparingly, preferring skeleton screens.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Test all color combinations for accessibility.\n- **Color Independence**: Avoid relying solely on color to convey information.\n- **Focus Indicators**: Ensure visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- **Tab Order**: Establish a logical flow through interactive elements.\n- **Skip Links**: Include \"Skip to main content\" for screen readers.\n- **Escape Functionality**: Enable closing modals and dropdowns with the Escape key.\n\n### Screen Reader Support\n- **ARIA Labels**: Provide descriptive labels for interactive elements.\n- **Heading Structure**: Maintain a proper H1-H6 hierarchy for screen readers.\n- **Alt Text**: Offer meaningful descriptions for images and icons.\n- **Form Labels**: Explicitly associate labels with form controls.\n\n### Motor Accessibility\n- **Touch Targets**: Ensure a minimum of 44px x 44px clickable areas.\n- **Spacing**: Provide adequate space between interactive elements.\n- **Timeout Warnings**: Include warnings for sessions with time limits.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile**: Range from 320px to 767px.\n- **Tablet**: Range from 768px to 1023px.\n- **Desktop**: Range from 1024px to 1199px.\n- **Large Desktop**: 1200px and above.\n\n### Mobile-First Approach\n- **Progressive Enhancement**: Begin with mobile design and enhance for larger screens.\n- **Touch Interactions**: Incorporate swipe gestures, tap targets, and thumb-friendly navigation.\n- **Content Priority**: Ensure essential content is visible without scrolling.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- **Duration**: Set transitions between 200-300ms for most interactions.\n- **Easing**: Use ease-out for entrances and ease-in for exits.\n- **Button Feedback**: Provide subtle scale or color changes on interaction.\n- **Form Feedback**: Ensure smooth transitions between states.\n\n### Page Transitions\n- **Loading States**: Display progress for actions taking over 1 second.\n- **Content Updates**: Use smooth fade or slide transitions for content changes.\n- **Error Handling**: Offer clear visual feedback without interruptions.\n\n## 8. Icon System\n\n### Icon Library\n- **Style**: Maintain consistent stroke width and corner radius for icons.\n- **Sizes**: Provide standard sizes of 16px, 20px, 24px, 32px.\n- **Usage**: Use functional icons for navigation and decorative icons sparingly.\n- **Accessibility**: Include Alt text or ARIA labels for meaningful icons.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- **Clarity**: Use simple, direct language for better understanding.\n- **Consistency**: Maintain standard terminology across the application.\n- **Actionable**: Provide clear next steps for users to follow.\n- **Inclusive**: Ensure gender-neutral and accessible language usage.\n\n### Error Messages\n- **Specific**: Explain precisely what went wrong in error messages.\n- **Helpful**: Offer steps to resolve issues in a user-friendly manner.\n- **Human**: Avoid technical jargon in error messages.\n- **Positioning**: Display error messages near relevant inputs or actions.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- **Formats**: Opt for WebP with fallbacks and SVG for icons.\n- **Sizing**: Provide multiple resolutions for different screen densities.\n- **Lazy Loading**: Implement for images below the fold to enhance performance.\n\n### Asset Management\n- **Component Reusability**: Maximize reuse of design components for efficiency.\n- **Consistent Naming**: Use clear, descriptive names for all elements.\n- **Style Organization**: Group colors, typography, and spacing logically for easy management.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Ensure all components adhere to the established design system.\n- [ ] Verify color contrast meets WCAG AA standards.\n- [ ] Confirm interactive elements meet minimum size requirements.\n- [ ] Maintain consistency in typography hierarchy.\n- [ ] Define responsive behavior for all breakpoints.\n\n### Accessibility Audit\n- [ ] Validate keyboard navigation for all interactive elements.\n- [ ] Verify screen reader compatibility.\n- [ ] Check for color-blind friendly color combinations.\n- [ ] Provide alternative text for all images.\n- [ ] Associate form labels correctly.\n\n### Brand Consistency\n- [ ] Adhere to brand guidelines for logo usage.\n- [ ] Match color palette with brand standards.\n- [ ] Reflect brand personality in typography.\n- [ ] Maintain consistent voice and tone throughout the application.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Develop example pages showcasing components in context.",
    "type": "design_guidelines",
    "id": 6,
    "timestamp": "2025-08-25T14:42:45.761009"
  },
  {
    "input": "I require an intelligent insurance claims processing system that automates claim evaluation, fraud detection, and settlement processes. The system should include:\n\n• Automated claim intake from multiple channels (web, mobile, phone, email)\n• AI-powered damage assessment using image recognition and ML algorithms\n• Integration with third-party assessors, repair shops, and medical providers\n• Real-time fraud detection using pattern analysis and risk scoring\n• Workflow automation for claim routing, approval, and settlement\n• Customer communication portal with status updates and document sharing\n• Integration with policy management systems for coverage verification\n• Regulatory compliance for insurance industry standards\n• Analytics dashboard for claim trends, fraud patterns, and performance metrics\n• Mobile app for field adjusters with offline capability\n• Automated payment processing and settlement reconciliation\n\nThe system must handle high claim volumes, ensure regulatory compliance, and provide excellent customer experience throughout the claims lifecycle.",
    "guidelines": "# Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an advanced insurance claims processing system that streamlines claim evaluation, fraud detection, and settlement processes. The system should automate claim intake, leverage AI for damage assessment, integrate with third parties, ensure fraud detection, and compliance, and enhance customer experience.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the company logo with a minimum height of 24px for web.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings.\n- **Brand Voice**: Maintain a professional, trustworthy, and approachable tone in UI copy.\n- **Typography Hierarchy**: Establish clear heading levels (H1-H6) with consistent font weights and sizes.\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessible contrast ratios.\n- **Semantic Colors**: Assign colors for Success (green), Warning (amber), Error (red), Info (blue).\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure WCAG AA compliance for text contrast ratios.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface with recommended system fonts for performance.\n- **Font Weights**: Specify Regular (400), Medium (500), Semi-bold (600), Bold (700).\n- **Line Heights**: Set 1.2 for headings and 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px).\n- **H2**: Apply for section headers (24-32px).\n- **H3**: Utilize for subsection headers (20-24px).\n- **Body**: Use for primary content (14-16px).\n- **Caption**: Apply for supporting text (12-14px).\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins.\n- **Tablet**: Utilize an 8-column grid with 20px gutters.\n- **Mobile**: Implement a 4-column grid with 16px gutters.\n- **Container Max-width**: Set at 1200px for optimal readability.\n\n### Spacing System\n- **Base Unit**: Use 8px increments for spacing consistency.\n- **Component Padding**: Define internal spacing for component consistency.\n- **Section Margins**: Ensure vertical rhythm between content blocks.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n\n#### Primary Navigation\n- **Desktop**: Horizontal top navigation with dropdown menus.\n- **Mobile**: Hamburger menu with slide-out drawer.\n- **Active States**: Provide clear visual indication of the current page/section.\n- **Accessibility**: Ensure proper ARIA labels and keyboard navigation support.\n\n#### Breadcrumbs\n- **Format**: Follow the Home > Section > Subsection > Current Page structure.\n- **Separators**: Use forward slash (/) or chevron (>) for clarity.\n- **Clickable Elements**: Make all elements clickable except the current page.\n\n### Form Components\n\n#### Input Fields\n- **Height**: Maintain a minimum of 44px for touch targets.\n- **States**: Define Default, Focus, Error, Disabled, and Success states.\n- **Labels**: Keep labels visible and positioned above inputs.\n- **Placeholder Text**: Provide helpful examples, not instructions.\n- **Error Messaging**: Offer clear and actionable feedback below inputs.\n\n#### Buttons\n- **Primary Button**: Ensure high contrast for main actions.\n- **Secondary Button**: Use lower contrast for secondary actions.\n- **Tertiary Button**: Text-only for less critical actions.\n- **Sizes**: Specify Small (32px), Medium (40px), Large (48px).\n- **States**: Define Default, Hover, Active, Disabled, and Loading states.\n\n#### Form Validation\n- **Inline Validation**: Provide real-time feedback for individual fields.\n- **Error Prevention**: Implement input constraints and helpful formatting.\n- **Success States**: Confirm correct inputs with positive feedback.\n\n### Data Display Components\n\n#### Tables\n- **Header Styling**: Use bold text and background color differentiation.\n- **Row Styling**: Apply alternating backgrounds for readability.\n- **Sorting**: Provide clear visual indicators for sortable columns.\n- **Pagination**: Display entries info and navigation controls.\n- **Responsive**: Ensure responsiveness on mobile screens.\n\n#### Cards\n- **Shadow Elevation**: Use subtle drop shadows (2-4px blur).\n- **Border Radius**: Maintain consistent corner rounding (4-8px).\n- **Content Hierarchy**: Clearly define title, body, and action areas.\n- **Hover States**: Implement subtle elevation or border changes.\n\n### Feedback Components\n\n#### Alerts and Notifications\n- **Success**: Display with a green background and checkmark icon.\n- **Warning**: Show with an amber background and warning icon.\n- **Error**: Indicate with a red background and error icon.\n- **Info**: Use a blue background with an info icon.\n- **Positioning**: Display toast notifications in the top-right and inline alerts contextually.\n\n#### Loading States\n- **Skeleton Screens**: Utilize gray placeholders matching content structure.\n- **Progress Indicators**: Use linear for known progress and circular for unknown.\n- **Spinners**: Employ sparingly, preferring skeleton screens.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Test all color combinations for accessibility.\n- **Color Independence**: Avoid relying solely on color to convey information.\n- **Focus Indicators**: Ensure visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- **Tab Order**: Maintain a logical flow through interactive elements.\n- **Skip Links**: Include \"Skip to main content\" for screen readers.\n- **Escape Functionality**: Enable closing modals and dropdowns with the Escape key.\n\n### Screen Reader Support\n- **ARIA Labels**: Provide descriptive labels for interactive elements.\n- **Heading Structure**: Ensure a proper H1-H6 hierarchy for screen readers.\n- **Alt Text**: Include meaningful descriptions for images and icons.\n- **Form Labels**: Explicitly associate labels with form controls.\n\n### Motor Accessibility\n- **Touch Targets**: Ensure a minimum of 44px x 44px clickable areas.\n- **Spacing**: Maintain adequate space between interactive elements.\n- **Timeout Warnings**: Implement warnings for sessions with time limits.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile**: Range from 320px to 767px.\n- **Tablet**: Range from 768px to 1023px.\n- **Desktop**: Range from 1024px to 1199px.\n- **Large Desktop**: 1200px and above.\n\n### Mobile-First Approach\n- **Progressive Enhancement**: Begin with mobile design and enhance for larger screens.\n- **Touch Interactions**: Incorporate swipe gestures, tap targets, and thumb-friendly navigation.\n- **Content Priority**: Ensure essential content is visible without scrolling.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- **Duration**: Set transitions between 200-300ms for most interactions.\n- **Easing**: Use ease-out for entrances and ease-in for exits.\n- **Button Feedback**: Provide subtle scale or color changes on interaction.\n- **Form Feedback**: Ensure smooth transitions between states.\n\n### Page Transitions\n- **Loading States**: Show progress for actions taking over 1 second.\n- **Content Updates**: Implement smooth fade or slide transitions.\n- **Error Handling**: Offer clear visual feedback without interruptions.\n\n## 8. Icon System\n\n### Icon Library\n- **Style**: Maintain consistent stroke width and corner radius.\n- **Sizes**: Provide standard sizes of 16px, 20px, 24px, 32px.\n- **Usage**: Use functional icons for navigation and decorative icons sparingly.\n- **Accessibility**: Include Alt text or ARIA labels for meaningful icons.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- **Clarity**: Use simple, direct language.\n- **Consistency**: Maintain standard terminology across the application.\n- **Actionable**: Provide clear next steps for users.\n- **Inclusive**: Use gender-neutral and accessible language.\n\n### Error Messages\n- **Specific**: Explain precisely what went wrong.\n- **Helpful**: Offer steps to resolve the issue.\n- **Human**: Avoid technical jargon in error messages.\n- **Positioning**: Display near the relevant input or action.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- **Formats**: Utilize WebP with fallbacks and SVG for icons.\n- **Sizing**: Provide multiple resolutions for different screen densities.\n- **Lazy Loading**: Implement for images below the fold.\n\n### Asset Management\n- **Component Reusability**: Maximize reuse of design components.\n- **Consistent Naming**: Use clear, descriptive names for all elements.\n- **Style Organization**: Group colors, typography, and spacing logically.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Ensure all components adhere to the established design system.\n- [ ] Verify color contrast meets WCAG AA standards.\n- [ ] Confirm interactive elements meet minimum size requirements.\n- [ ] Maintain consistency in typography hierarchy.\n- [ ] Define responsive behavior for all breakpoints.\n\n### Accessibility Audit\n- [ ] Validate keyboard navigation for all interactive elements.\n- [ ] Verify screen reader compatibility.\n- [ ] Check for color-blind friendly color combinations.\n- [ ] Provide alternative text for all images.\n- [ ] Associate form labels correctly.\n\n### Brand Consistency\n- [ ] Adhere to brand guidelines for logo usage.\n- [ ] Match color palette with brand standards.\n- [ ] Reflect brand personality in typography.\n- [ ] Maintain consistent voice and tone throughout.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Develop example pages demonstrating components in context.",
    "type": "design_guidelines",
    "id": 7,
    "timestamp": "2025-08-25T14:48:42.002956"
  },
  {
    "input": "I require an intelligent insurance claims processing system that automates claim evaluation, fraud detection, and settlement processes. The system should include:\n\n• Automated claim intake from multiple channels (web, mobile, phone, email)\n• AI-powered damage assessment using image recognition and ML algorithms\n• Integration with third-party assessors, repair shops, and medical providers\n• Real-time fraud detection using pattern analysis and risk scoring\n• Workflow automation for claim routing, approval, and settlement\n• Customer communication portal with status updates and document sharing\n• Integration with policy management systems for coverage verification\n• Regulatory compliance for insurance industry standards\n• Analytics dashboard for claim trends, fraud patterns, and performance metrics\n• Mobile app for field adjusters with offline capability\n• Automated payment processing and settlement reconciliation\n\nThe system must handle high claim volumes, ensure regulatory compliance, and provide excellent customer experience throughout the claims lifecycle.",
    "guidelines": "# Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an intelligent insurance claims processing system that streamlines claim evaluation, fraud detection, and settlement processes. The system aims to automate claim intake, enhance damage assessment with AI, integrate with third parties, ensure fraud detection, automate workflows, provide customer communication, comply with regulations, offer analytics insights, support field adjusters, and automate payment processing for a seamless claims lifecycle.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the company logo with a minimum height of 24px for web.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings.\n- **Brand Voice**: Maintain a professional, trustworthy, and approachable tone in all UI copy.\n- **Typography Hierarchy**: Establish clear heading levels (H1-H6) with consistent font weights and sizes.\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessibility-compliant contrast ratios.\n- **Semantic Colors**: Assign colors for Success (green), Warning (amber), Error (red), and Info (blue).\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure WCAG AA compliance (4.5:1 for normal text, 3:1 for large text).\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface with system fonts recommended for performance.\n- **Font Weights**: Specify Regular (400), Medium (500), Semi-bold (600), and Bold (700).\n- **Line Heights**: Set to 1.2 for headings and 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px).\n- **H2**: Apply for section headers (24-32px).\n- **H3**: Utilize for subsection headers (20-24px).\n- **Body**: Primary content text size (14-16px).\n- **Caption**: Supporting text size (12-14px).\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins.\n- **Tablet**: Utilize an 8-column grid with 20px gutters.\n- **Mobile**: Employ a 4-column grid with 16px gutters.\n- **Container Max-width**: Set to 1200px for optimal readability.\n\n### Spacing System\n- **Base Unit**: Use 8px increments for spacing (8px, 16px, 24px, 32px, 48px, 64px, 96px).\n- **Component Padding**: Ensure consistent internal spacing for elements.\n- **Section Margins**: Maintain vertical rhythm between content blocks.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n\n#### Primary Navigation\n- **Desktop**: Horizontal top navigation with dropdown menus.\n- **Mobile**: Hamburger menu with slide-out drawer.\n- **Active States**: Provide clear visual indication of the current page/section.\n- **Accessibility**: Ensure proper ARIA labels and support for keyboard navigation.\n\n#### Breadcrumbs\n- **Format**: Display as Home > Section > Subsection > Current Page.\n- **Separators**: Use forward slash (/) or chevron (>) for differentiation.\n- **Clickable Elements**: Allow interaction with all elements except the current page.\n\n### Form Components\n\n#### Input Fields\n- **Height**: Maintain a minimum of 44px for touch targets.\n- **States**: Include Default, Focus, Error, Disabled, and Success states.\n- **Labels**: Keep labels always visible and positioned above inputs.\n- **Placeholder Text**: Provide examples, not instructions.\n- **Error Messaging**: Offer clear and actionable feedback below inputs.\n\n#### Buttons\n- **Primary Button**: High contrast for main actions.\n- **Secondary Button**: Lower contrast for secondary actions.\n- **Tertiary Button**: Text-only for less critical actions.\n- **Sizes**: Offer Small (32px), Medium (40px), and Large (48px) options.\n- **States**: Define Default, Hover, Active, Disabled, and Loading states.\n\n#### Form Validation\n- **Inline Validation**: Provide real-time feedback for individual fields.\n- **Error Prevention**: Implement input constraints and helpful formatting.\n- **Success States**: Confirm correct inputs with positive feedback.\n\n### Data Display Components\n\n#### Tables\n- **Header Styling**: Bold text and background color differentiation.\n- **Row Styling**: Use alternating backgrounds for readability.\n- **Sorting**: Include clear visual indicators for sortable columns.\n- **Pagination**: Display entries info and navigation controls.\n- **Responsive**: Ensure responsiveness for mobile viewing.\n\n#### Cards\n- **Shadow Elevation**: Apply subtle drop shadows (2-4px blur).\n- **Border Radius**: Maintain consistent corner rounding (4-8px).\n- **Content Hierarchy**: Clearly define title, body, and action areas.\n- **Hover States**: Implement subtle elevation or border changes for interactivity.\n\n### Feedback Components\n\n#### Alerts and Notifications\n- **Success**: Use green background with checkmark icon.\n- **Warning**: Apply amber background with warning icon.\n- **Error**: Utilize red background with error icon.\n- **Info**: Display blue background with info icon.\n- **Positioning**: Place toast notifications in the top-right and inline alerts contextually.\n\n#### Loading States\n- **Skeleton Screens**: Use gray placeholders matching content structure.\n- **Progress Indicators**: Employ linear or circular indicators for known and unknown progress.\n- **Spinners**: Use sparingly and prefer skeleton screens.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Test all color combinations for accessibility.\n- **Color Independence**: Avoid relying solely on color to convey information.\n- **Focus Indicators**: Ensure visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- **Tab Order**: Establish a logical flow through interactive elements.\n- **Skip Links**: Include \"Skip to main content\" for screen reader users.\n- **Escape Functionality**: Allow closing modals and dropdowns with the Escape key.\n\n### Screen Reader Support\n- **ARIA Labels**: Provide descriptive labels for interactive elements.\n- **Heading Structure**: Maintain a proper H1-H6 hierarchy for screen readers.\n- **Alt Text**: Include meaningful descriptions for images and icons.\n- **Form Labels**: Explicitly associate labels with form controls.\n\n### Motor Accessibility\n- **Touch Targets**: Ensure minimum 44px x 44px clickable areas.\n- **Spacing**: Provide adequate space between interactive elements.\n- **Timeout Warnings**: Alert users for sessions with time limits.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile**: Range from 320px to 767px.\n- **Tablet**: Range from 768px to 1023px.\n- **Desktop**: Range from 1024px to 1199px.\n- **Large Desktop**: 1200px and above.\n\n### Mobile-First Approach\n- **Progressive Enhancement**: Begin with mobile design and enhance for larger screens.\n- **Touch Interactions**: Implement swipe gestures, tap targets, and thumb-friendly navigation.\n- **Content Priority**: Ensure critical content is visible without scrolling.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- **Duration**: Set transitions to 200-300ms for smooth interactions.\n- **Easing**: Use ease-out for entrances and ease-in for exits.\n- **Button Feedback**: Provide subtle scale or color changes on interaction.\n- **Form Feedback**: Ensure smooth transitions between states.\n\n### Page Transitions\n- **Loading States**: Display progress for actions taking over 1 second.\n- **Content Updates**: Use smooth fade or slide transitions for updates.\n- **Error Handling**: Offer clear visual feedback without interruptions.\n\n## 8. Icon System\n\n### Icon Library\n- **Style**: Maintain consistent stroke width and corner radius.\n- **Sizes**: Provide standard sizes of 16px, 20px, 24px, and 32px.\n- **Usage**: Use functional icons for navigation and decorative icons sparingly.\n- **Accessibility**: Include alt text or ARIA labels for meaningful icons.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- **Clarity**: Use simple and direct language.\n- **Consistency**: Maintain standard terminology across the application.\n- **Actionable**: Provide clear next steps for users.\n- **Inclusive**: Use gender-neutral and accessible language.\n\n### Error Messages\n- **Specific**: Explain precisely what went wrong.\n- **Helpful**: Offer steps to resolve the issue.\n- **Human**: Avoid technical jargon in error messages.\n- **Positioning**: Display near the relevant input or action.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- **Formats**: Opt for WebP with fallbacks and SVG for icons.\n- **Sizing**: Provide multiple resolutions for different screen densities.\n- **Lazy Loading**: Implement for images below the fold.\n\n### Asset Management\n- **Component Reusability**: Maximize reuse of design components.\n- **Consistent Naming**: Use clear and descriptive names for all elements.\n- **Style Organization**: Group colors, typography, and spacing logically.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Ensure all components adhere to the established design system.\n- [ ] Verify color contrast meets WCAG AA standards.\n- [ ] Confirm interactive elements meet minimum size requirements.\n- [ ] Maintain consistency in typography hierarchy.\n- [ ] Define responsive behavior for all breakpoints.\n\n### Accessibility Audit\n- [ ] Validate keyboard navigation for all interactive elements.\n- [ ] Verify screen reader compatibility.\n- [ ] Check for color-blind friendly color combinations.\n- [ ] Provide alternative text for all images.\n- [ ] Associate form labels correctly.\n\n### Brand Consistency\n- [ ] Adhere to brand guidelines for logo usage.\n- [ ] Match color palette with brand standards.\n- [ ] Reflect brand personality in typography.\n- [ ] Maintain consistent voice and tone throughout.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Develop example pages showcasing components in context.\n\n--- \n\nImplementation Notes for Figma Make\nComponent Organization: Create a master component library with all variants and states\nAuto-layout Usage: Implement responsive behavior using Figma's auto-layout features\nStyle Management: Use Figma styles for colors, typography, and effects\nDocumentation: Include usage guidelines within component descriptions\nTesting: Create example pages showing components in context",
    "type": "design_guidelines",
    "id": 8,
    "timestamp": "2025-08-25T14:58:01.892567"
  },
  {
    "input": "I require an intelligent insurance claims processing system that automates claim evaluation, fraud detection, and settlement processes. The system should include:\n\n• Automated claim intake from multiple channels (web, mobile, phone, email)\n• AI-powered damage assessment using image recognition and ML algorithms\n• Integration with third-party assessors, repair shops, and medical providers\n• Real-time fraud detection using pattern analysis and risk scoring\n• Workflow automation for claim routing, approval, and settlement\n• Customer communication portal with status updates and document sharing\n• Integration with policy management systems for coverage verification\n• Regulatory compliance for insurance industry standards\n• Analytics dashboard for claim trends, fraud patterns, and performance metrics\n• Mobile app for field adjusters with offline capability\n• Automated payment processing and settlement reconciliation\n\nThe system must handle high claim volumes, ensure regulatory compliance, and provide excellent customer experience throughout the claims lifecycle.",
    "guidelines": "# Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an advanced insurance claims processing system that streamlines claim evaluation, fraud detection, and settlement processes. The system aims to automate claim intake, enhance damage assessment with AI, integrate third-party services, ensure fraud detection, automate workflows, provide customer communication, comply with regulations, offer analytics insights, and support mobile field adjusters.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the company logo with a minimum height of 24px for web.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings.\n- **Brand Voice**: Maintain a professional, trustworthy, and approachable tone in UI copy.\n- **Typography Hierarchy**: Establish consistent heading levels (H1-H6) with clear font weights and sizes.\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessible contrast ratios.\n- **Semantic Colors**: Assign colors for Success (green), Warning (amber), Error (red), Info (blue).\n- **Neutral Palette**: Use grays for backgrounds, borders, and text (minimum 9 shades).\n- **Contrast Requirements**: Ensure WCAG AA compliance for text contrast.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface with recommended system fonts for performance.\n- **Font Weights**: Specify Regular (400), Medium (500), Semi-bold (600), Bold (700).\n- **Line Heights**: Set appropriate values for headings and body text.\n- **Font Sizes**: Establish an 8-point scale for various text elements.\n\n### Text Hierarchy\n- Define sizes and styles for H1, H2, H3, Body, and Caption text elements.\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- Define grid layouts for Desktop, Tablet, and Mobile views.\n- Specify container max-width for optimal readability.\n- Establish spacing guidelines for internal and external components.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n- Include Primary Navigation and Breadcrumbs with specific formats and interactions.\n- Ensure accessibility and clear active states for navigation elements.\n\n### Form Components\n- Define Input Fields, Buttons, and Form Validation requirements.\n- Specify sizes, states, and error handling for form elements.\n\n### Data Display Components\n- Design Tables, Cards, and Feedback Components for data presentation.\n- Include styling, responsiveness, and interaction details for each component.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- Test and ensure all color combinations meet accessibility standards.\n- Provide visible focus indicators for keyboard navigation.\n\n### Keyboard Navigation\n- Define tab order, skip links, and escape functionality for ease of use.\n- Ensure screen reader support with proper labels and structures.\n\n### Motor Accessibility\n- Consider touch targets, spacing, and timeout warnings for user interactions.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- Define breakpoints for Mobile, Tablet, Desktop, and Large Desktop views.\n- Implement a mobile-first approach with touch-friendly interactions.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- Specify durations, easing, and feedback for interactive elements.\n- Define page transitions and error handling animations.\n\n## 8. Icon System\n\n### Icon Library\n- Establish consistent styles, sizes, and usage guidelines for icons.\n- Ensure accessibility with alt text or ARIA labels.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- Maintain clarity, consistency, and inclusivity in content.\n- Provide helpful error messages and positioning for user guidance.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- Optimize image formats, sizes, and lazy loading for performance.\n- Manage assets for reusability and consistent naming.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- Check components, color contrast, interactive elements, and responsiveness.\n- Ensure accessibility, brand consistency, and typography standards.\n\n### Accessibility Audit\n- Verify keyboard navigation, screen reader compatibility, and color-blind friendly designs.\n- Provide alternative text for images and proper form labels.\n\n### Brand Consistency\n- Align logo usage, color palette, typography, and voice with brand guidelines.\n- Maintain consistency throughout the application for a unified user experience.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Develop example pages to demonstrate components in context.\n\n--- \n\nImplementation Notes for Figma Make\nComponent Organization: Create a master component library with all variants and states\nAuto-layout Usage: Implement responsive behavior using Figma's auto-layout features\nStyle Management: Use Figma styles for colors, typography, and effects\nDocumentation: Include usage guidelines within component descriptions\nTesting: Create example pages showing components in context",
    "type": "design_guidelines",
    "id": 9,
    "timestamp": "2025-08-25T15:04:32.341263"
  },
  {
    "input": "I require an intelligent insurance claims processing system that automates claim evaluation, fraud detection, and settlement processes. The system should include:\n\n• Automated claim intake from multiple channels (web, mobile, phone, email)\n• AI-powered damage assessment using image recognition and ML algorithms\n• Integration with third-party assessors, repair shops, and medical providers\n• Real-time fraud detection using pattern analysis and risk scoring\n• Workflow automation for claim routing, approval, and settlement\n• Customer communication portal with status updates and document sharing\n• Integration with policy management systems for coverage verification\n• Regulatory compliance for insurance industry standards\n• Analytics dashboard for claim trends, fraud patterns, and performance metrics\n• Mobile app for field adjusters with offline capability\n• Automated payment processing and settlement reconciliation\n\nThe system must handle high claim volumes, ensure regulatory compliance, and provide excellent customer experience throughout the claims lifecycle.",
    "guidelines": "# Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop a sophisticated insurance claims processing system that streamlines claim evaluation, fraud detection, and settlement processes. The system should efficiently manage high claim volumes, ensure regulatory compliance, and deliver exceptional customer experience across all stages of the claims lifecycle.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the company logo with a minimum height of 24px for web.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings.\n- **Brand Voice**: Maintain a professional, trustworthy, and approachable tone in all UI copy.\n- **Typography Hierarchy**: Establish consistent heading levels (H1-H6) with clear font weights and sizes.\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessible contrast ratios.\n- **Semantic Colors**: Assign colors for Success (green), Warning (amber), Error (red), Info (blue).\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure WCAG AA compliance (4.5:1 for normal text, 3:1 for large text).\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface (system fonts recommended for performance).\n- **Font Weights**: Specify Regular (400), Medium (500), Semi-bold (600), Bold (700).\n- **Line Heights**: Set to 1.2 for headings, 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px).\n- **H2**: Employ for section headers (24-32px).\n- **H3**: Apply for subsection headers (20-24px).\n- **Body**: Utilize for primary content (14-16px).\n- **Caption**: Use for supporting text (12-14px).\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins.\n- **Tablet**: Utilize an 8-column grid with 20px gutters.\n- **Mobile**: Employ a 4-column grid with 16px gutters.\n- **Container Max-width**: Set to 1200px for optimal readability.\n\n### Spacing System\n- **Base Unit**: Use 8px increments for consistent spacing.\n- **Component Padding**: Define internal spacing for component consistency.\n- **Section Margins**: Establish vertical rhythm between content blocks.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n\n#### Primary Navigation\n- **Desktop**: Horizontal top navigation with dropdown menus.\n- **Mobile**: Hamburger menu with slide-out drawer.\n- **Active States**: Provide clear visual indication of the current page/section.\n- **Accessibility**: Ensure proper ARIA labels and support for keyboard navigation.\n\n#### Breadcrumbs\n- **Format**: Display as Home > Section > Subsection > Current Page.\n- **Separators**: Use forward slash (/) or chevron (>) for clarity.\n- **Clickable Elements**: Allow all except the current page.\n\n### Form Components\n\n#### Input Fields\n- **Height**: Maintain a minimum of 44px for touch targets.\n- **States**: Include Default, Focus, Error, Disabled, Success states.\n- **Labels**: Keep labels always visible and positioned above inputs.\n- **Placeholder Text**: Provide helpful examples, not instructions.\n- **Error Messaging**: Offer clear and actionable feedback below inputs.\n\n#### Buttons\n- **Primary Button**: Ensure high contrast for main actions.\n- **Secondary Button**: Use lower contrast for secondary actions.\n- **Tertiary Button**: Text-only option for less critical actions.\n- **Sizes**: Offer Small (32px), Medium (40px), Large (48px) sizes.\n- **States**: Define Default, Hover, Active, Disabled, Loading states.\n\n#### Form Validation\n- **Inline Validation**: Provide real-time feedback for individual fields.\n- **Error Prevention**: Implement input constraints and helpful formatting.\n- **Success States**: Confirm correct inputs with positive feedback.\n\n### Data Display Components\n\n#### Tables\n- **Header Styling**: Use bold text and background color differentiation.\n- **Row Styling**: Alternate backgrounds for readability.\n- **Sorting**: Include clear visual indicators for sortable columns.\n- **Pagination**: Display entries info and navigation controls.\n- **Responsive**: Ensure responsiveness on mobile screens.\n\n#### Cards\n- **Shadow Elevation**: Apply subtle drop shadows (2-4px blur).\n- **Border Radius**: Maintain consistent corner rounding (4-8px).\n- **Content Hierarchy**: Clearly define title, body, and action areas.\n- **Hover States**: Implement subtle elevation or border changes.\n\n### Feedback Components\n\n#### Alerts and Notifications\n- **Success**: Display with a green background and checkmark icon.\n- **Warning**: Use an amber background with a warning icon.\n- **Error**: Indicate with a red background and error icon.\n- **Info**: Show with a blue background and info icon.\n- **Positioning**: Place toast notifications in the top-right and inline alerts contextually.\n\n#### Loading States\n- **Skeleton Screens**: Utilize gray placeholders matching content structure.\n- **Progress Indicators**: Use linear for known progress and circular for unknown.\n- **Spinners**: Employ sparingly, preferring skeleton screens.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Test all color combinations for accessibility.\n- **Color Independence**: Avoid relying solely on color to convey information.\n- **Focus Indicators**: Ensure visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- **Tab Order**: Establish a logical flow through interactive elements.\n- **Skip Links**: Include \"Skip to main content\" for screen readers.\n- **Escape Functionality**: Allow closing modals and dropdowns with the Escape key.\n\n### Screen Reader Support\n- **ARIA Labels**: Provide descriptive labels for interactive elements.\n- **Heading Structure**: Maintain a proper H1-H6 hierarchy for screen readers.\n- **Alt Text**: Include meaningful descriptions for images and icons.\n- **Form Labels**: Explicitly associate labels with form controls.\n\n### Motor Accessibility\n- **Touch Targets**: Ensure a minimum of 44px x 44px clickable areas.\n- **Spacing**: Provide adequate space between interactive elements.\n- **Timeout Warnings**: Alert users for sessions with time limits.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile**: Range from 320px to 767px.\n- **Tablet**: Range from 768px to 1023px.\n- **Desktop**: Range from 1024px to 1199px.\n- **Large Desktop**: 1200px and above.\n\n### Mobile-First Approach\n- **Progressive Enhancement**: Begin with mobile design and enhance for larger screens.\n- **Touch Interactions**: Incorporate swipe gestures, tap targets, and thumb-friendly navigation.\n- **Content Priority**: Ensure essential content is visible without scrolling.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- **Duration**: Set transitions to 200-300ms for most interactions.\n- **Easing**: Use ease-out for entrances and ease-in for exits.\n- **Button Feedback**: Provide subtle scale or color changes on interaction.\n- **Form Feedback**: Ensure smooth transitions between states.\n\n### Page Transitions\n- **Loading States**: Show progress for actions taking more than 1 second.\n- **Content Updates**: Use smooth fade or slide transitions.\n- **Error Handling**: Offer clear visual feedback without interruptions.\n\n## 8. Icon System\n\n### Icon Library\n- **Style**: Maintain consistent stroke width and corner radius.\n- **Sizes**: Provide standard sizes of 16px, 20px, 24px, 32px.\n- **Usage**: Use functional icons for navigation and decorative icons sparingly.\n- **Accessibility**: Include Alt text or ARIA labels for meaningful icons.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- **Clarity**: Use simple, direct language.\n- **Consistency**: Employ standard terminology across the application.\n- **Actionable**: Provide clear next steps for users.\n- **Inclusive**: Ensure gender-neutral and accessible language.\n\n### Error Messages\n- **Specific**: Explain precisely what went wrong.\n- **Helpful**: Offer steps to resolve the issue.\n- **Human**: Avoid technical jargon in error messages.\n- **Positioning**: Place error messages near relevant inputs or actions.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- **Formats**: Opt for WebP with fallbacks and SVG for icons.\n- **Sizing**: Provide multiple resolutions for different screen densities.\n- **Lazy Loading**: Implement for images below the fold.\n\n### Asset Management\n- **Component Reusability**: Maximize reuse of design components.\n- **Consistent Naming**: Use clear, descriptive names for all elements.\n- **Style Organization**: Group colors, typography, and spacing logically.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Ensure all components adhere to the established design system.\n- [ ] Verify color contrast meets WCAG AA standards.\n- [ ] Confirm interactive elements meet minimum size requirements.\n- [ ] Maintain consistency in typography hierarchy.\n- [ ] Define responsive behavior for all breakpoints.\n\n### Accessibility Audit\n- [ ] Validate keyboard navigation for all interactive elements.\n- [ ] Verify screen reader compatibility.\n- [ ] Check for color-blind friendly color combinations.\n- [ ] Provide alternative text for all images.\n- [ ] Associate form labels correctly.\n\n### Brand Consistency\n- [ ] Adhere to brand guidelines for logo usage.\n- [ ] Match color palette with brand standards.\n- [ ] Reflect brand personality in typography.\n- [ ] Maintain consistent voice and tone throughout.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Develop example pages showcasing components in context.\n\n--- \n\nImplementation Notes for Figma Make\nComponent Organization: Create a master component library with all variants and states\nAuto-layout Usage: Implement responsive behavior using Figma's auto-layout features\nStyle Management: Use Figma styles for colors, typography, and effects\nDocumentation: Include usage guidelines within component descriptions\nTesting: Create example pages showing components in context",
    "type": "design_guidelines",
    "id": 10,
    "timestamp": "2025-08-25T15:37:32.112560"
  },
  {
    "input": "I need the system ability to ingest bureau rating algorithms. I will import filing to create rating calculation using AI and leverage machine learning for premium calculations. The objective of the requirement is to automate the process of interpreting insurer-submitted rate filing documents (PDFs) and converting them into executable rating logic using AI",
    "guidelines": "Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an enterprise application to automate the interpretation of insurer-submitted rate filing documents (PDFs) by ingesting bureau rating algorithms. The system will utilize AI to convert the filings into executable rating logic, enabling automated rating calculations and premium calculations.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Implement the company logo with a minimum 24px height for web applications.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes reflecting trustworthiness and professionalism.\n- **Brand Voice**: Maintain a professional and approachable tone in all UI copy.\n- **Typography Hierarchy**: Establish clear heading levels (H1-H6) for consistent information hierarchy.\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessible contrast ratios.\n- **Semantic Colors**: Assign meanings to colors like Success (green), Warning (amber), Error (red), and Info (blue).\n- **Neutral Palette**: Use grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure WCAG AA compliance for text readability.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface with recommended system fonts for performance.\n- **Font Weights**: Include Regular (400), Medium (500), Semi-bold (600), and Bold (700).\n- **Line Heights**: Maintain 1.2 for headings and 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px).\n- **H2**: Utilize for section headers (24-32px).\n- **H3**: Apply for subsection headers (20-24px).\n- **Body**: Use for primary content (14-16px).\n- **Caption**: Utilize for supporting text (12-14px).\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins.\n- **Tablet**: Utilize an 8-column grid with 20px gutters.\n- **Mobile**: Implement a 4-column grid with 16px gutters.\n- **Container Max-width**: Set at 1200px for optimal readability.\n\n### Spacing System\n- **Base Unit**: Use 8px increments for consistent spacing.\n- **Component Padding**: Ensure internal spacing consistency.\n- **Section Margins**: Maintain vertical rhythm between content blocks.\n\n## 4. Component Library Specifications\n\n### Data Ingestion Components\n\n#### File Import\n- **AI Integration**: Enable the system to ingest bureau rating algorithms.\n- **PDF Parsing**: Implement the ability to interpret insurer-submitted rate filing documents.\n- **Automation**: Utilize AI for converting filings into executable rating logic.\n\n#### Premium Calculation\n- **Machine Learning**: Leverage AI and machine learning for automated premium calculations.\n- **Rating Logic**: Convert interpreted documents into executable rating logic.\n- **Calculation Engine**: Develop a system for automated rating calculations.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Ensure all color combinations meet accessibility standards.\n- **Color Independence**: Avoid relying solely on color for conveying information.\n- **Focus Indicators**: Provide visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- **Tab Order**: Establish a logical flow through interactive elements.\n- **Skip Links**: Include \"Skip to main content\" for screen reader users.\n- **Escape Functionality**: Enable closing modals and dropdowns with the Escape key.\n\n### Screen Reader Support\n- **ARIA Labels**: Provide descriptive labels for interactive elements.\n- **Heading Structure**: Maintain a proper H1-H6 hierarchy for screen readers.\n- **Alt Text**: Include meaningful descriptions for images and icons.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile**: Design for 320px - 767px screens.\n- **Tablet**: Optimize for 768px - 1023px screens.\n- **Desktop**: Ensure usability on 1024px - 1199px screens.\n- **Large Desktop**: Consider screens larger than 1200px.\n\n### Mobile-First Approach\n- **Progressive Enhancement**: Start design from mobile and enhance for larger screens.\n- **Touch Interactions**: Implement swipe gestures and thumb-friendly navigation.\n- **Content Priority**: Ensure important content is visible without scrolling.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- **Duration**: Keep transitions between 200-300ms for a smooth user experience.\n- **Easing**: Use ease-out for entrances and ease-in for exits.\n- **Feedback**: Provide subtle feedback on button and form interactions.\n\n### Page Transitions\n- **Loading States**: Display progress for actions taking more than 1 second.\n- **Content Updates**: Use smooth fade or slide transitions for content changes.\n- **Error Handling**: Provide clear visual feedback without interruptions.\n\n## 8. Icon System\n\n### Icon Usage\n- **Functional Icons**: Use icons for navigation purposes, sparingly for decoration.\n- **Accessibility**: Ensure icons have alt text or ARIA labels for screen reader users.\n\n## 9. Content Guidelines\n\n### Writing Style\n- **Clarity**: Use simple and direct language for all content.\n- **Consistency**: Maintain standard terminology across the application.\n- **Actionable**: Provide clear next steps for users.\n- **Inclusivity**: Use gender-neutral and accessible language.\n\n### Error Messages\n- **Specificity**: Explain errors clearly and concisely.\n- **Helpfulness**: Include steps to resolve issues in error messages.\n- **Human Touch**: Avoid technical jargon in error messages.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- **Formats**: Optimize images in WebP format with fallbacks and SVG for icons.\n- **Sizing**: Provide multiple resolutions for different screen densities.\n- **Lazy Loading**: Implement for images below the fold to improve performance.\n\n### Asset Management\n- **Component Reusability**: Maximize reuse of design components for efficiency.\n- **Naming Conventions**: Use clear and descriptive names for all elements.\n- **Style Organization**: Group colors, typography, and spacing logically for easy management.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Ensure all components align with the established design system.\n- [ ] Verify color contrast meets WCAG AA standards.\n- [ ] Confirm interactive elements meet minimum size requirements.\n- [ ] Maintain consistency in typography hierarchy.\n- [ ] Define responsive behavior for all breakpoints.\n\n### Accessibility Audit\n- [ ] Test keyboard navigation for all interactive elements.\n- [ ] Verify screen reader compatibility.\n- [ ] Check color-blind friendly color combinations.\n- [ ] Provide alternative text for all images.\n- [ ] Associate form labels correctly.\n\n### Brand Consistency\n- [ ] Adhere to brand guidelines in logo usage.\n- [ ] Match color palette with brand standards.\n- [ ] Reflect brand personality in typography.\n- [ ] Ensure consistent voice and tone throughout the application.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a comprehensive component library with all necessary variants and states.\n2. **Auto-layout Usage**: Utilize Figma's auto-layout features for responsive design implementation.\n3. **Style Management**: Employ Figma styles for colors, typography, and effects for consistency.\n4. **Documentation**: Include detailed guidelines within component descriptions for easy reference.\n5. **Testing**: Develop example pages showcasing components in real-world contexts for thorough testing and validation.",
    "type": "design_guidelines",
    "id": 11,
    "timestamp": "2025-08-25T17:38:16.711832"
  },
  {
    "input": "I need the system ability to ingest bureau rating algorithms. I will import filing to create rating calculation using AI and leverage machine learning for premium calculations. The objective of the requirement is to automate the process of interpreting insurer-submitted rate filing documents (PDFs) and converting them into executable rating logic using AI",
    "guidelines": "Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an enterprise application to automate the interpretation of insurer-submitted rate filing documents (PDFs) using AI. The system should ingest bureau rating algorithms, import filings, and leverage machine learning for premium calculations. The goal is to convert these documents into executable rating logic efficiently.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate a professional logo representing the application's purpose.\n- **Brand Colors**: Define a color palette that conveys trust, reliability, and innovation.\n- **Brand Voice**: Maintain a tone that is authoritative, precise, and user-friendly.\n- **Typography Hierarchy**: Establish a clear hierarchy for headings and content to enhance readability.\n\n### Color System\n- **Primary Colors**: Choose colors that reflect professionalism and sophistication.\n- **Semantic Colors**: Use colors like green for success, red for error, and blue for information.\n- **Neutral Palette**: Utilize neutral tones for backgrounds and text to ensure readability.\n- **Contrast Requirements**: Ensure all color combinations meet WCAG AA standards for accessibility.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Select a typeface that balances readability and modern design.\n- **Font Weights**: Use different weights to emphasize hierarchy and importance.\n- **Line Heights**: Set appropriate spacing for headings and body text.\n- **Font Sizes**: Establish a consistent scale for different text elements.\n\n### Text Hierarchy\n- Define clear distinctions between headings, subheadings, and body text for better information organization.\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- Define a grid system that supports the layout of complex rating logic components.\n- Ensure responsiveness across different devices for optimal user experience.\n\n### Spacing System\n- Establish consistent spacing for components to maintain visual harmony and usability.\n\n## 4. Component Library Specifications\n\n### Data Ingestion Components\n- Design components for importing bureau rating algorithms and insurer filings efficiently.\n- Implement AI-driven features for processing and interpreting PDF documents.\n\n### Calculation Components\n- Create components for rating calculations using AI and machine learning algorithms.\n- Ensure seamless integration for premium calculations and rating logic execution.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- Verify that all color choices meet accessibility standards for users with visual impairments.\n- Ensure proper color contrast ratios for readability.\n\n### Keyboard Navigation\n- Implement keyboard accessibility features for users who rely on assistive technologies.\n- Provide clear focus indicators for easy navigation.\n\n### Screen Reader Support\n- Include descriptive labels and alt text for all interactive elements and images.\n- Structure content with proper headings for screen reader compatibility.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- Design responsive layouts that adapt to various screen sizes for a seamless user experience.\n- Prioritize mobile-first design to cater to a wide range of devices.\n\n### Touch Interactions\n- Optimize touch interactions for mobile devices to enhance usability.\n- Ensure content visibility without excessive scrolling on smaller screens.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- Implement subtle animations to enhance user interactions and feedback.\n- Ensure smooth transitions between states for a polished user experience.\n\n### Page Transitions\n- Use animations to indicate loading states and content updates for user feedback.\n- Handle errors gracefully with clear visual cues.\n\n## 8. Icon System\n\n### Icon Library\n- Create a consistent set of icons for intuitive navigation and information display.\n- Ensure icons are accessible with appropriate labels for screen readers.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- Craft clear and concise content that guides users through the rating logic process.\n- Ensure all text is inclusive and actionable for a diverse user base.\n\n### Error Messages\n- Provide informative error messages that assist users in resolving issues.\n- Position error messages strategically for immediate user attention.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- Optimize images for fast loading times and bandwidth efficiency.\n- Utilize modern image formats and lazy loading techniques.\n\n### Asset Management\n- Organize design components for reusability and consistency.\n- Maintain clear naming conventions for easy asset identification.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- Ensure design components align with established guidelines and standards.\n- Verify accessibility features and responsiveness across breakpoints.\n\n### Accessibility Audit\n- Conduct thorough testing to confirm keyboard navigation and screen reader compatibility.\n- Check color choices for color-blind friendly combinations.\n\n### Brand Consistency\n- Uphold brand guidelines in logo usage, color palette, and typography choices.\n- Maintain a consistent brand voice throughout the application.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a structured component library for efficient design management.\n2. **Auto-layout Usage**: Utilize Figma's auto-layout features for responsive design implementation.\n3. **Style Management**: Employ Figma styles for consistent color, typography, and effects application-wide.\n4. **Documentation**: Include detailed usage guidelines within component descriptions for easy reference.\n5. **Testing**: Develop example pages to showcase components in various contexts for thorough testing.\n\n---",
    "type": "design_guidelines",
    "id": 12,
    "timestamp": "2025-08-25T17:43:45.134028"
  },
  {
    "input": "I require an intelligent insurance claims processing system that automates claim evaluation, fraud detection, and settlement processes. The system should include:\n\n• Automated claim intake from multiple channels (web, mobile, phone, email)\n• AI-powered damage assessment using image recognition and ML algorithms\n• Integration with third-party assessors, repair shops, and medical providers\n• Real-time fraud detection using pattern analysis and risk scoring\n• Workflow automation for claim routing, approval, and settlement\n• Customer communication portal with status updates and document sharing\n• Integration with policy management systems for coverage verification\n• Regulatory compliance for insurance industry standards\n• Analytics dashboard for claim trends, fraud patterns, and performance metrics\n• Mobile app for field adjusters with offline capability\n• Automated payment processing and settlement reconciliation\n\nThe system must handle high claim volumes, ensure regulatory compliance, and provide excellent customer experience throughout the claims lifecycle.",
    "guidelines": "# Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an advanced insurance claims processing system that streamlines claim evaluation, fraud detection, and settlement processes. The system aims to automate claim intake, enhance damage assessment with AI, integrate with third parties, ensure fraud detection, automate workflows, provide customer communication, comply with regulations, offer analytics insights, support mobile field adjusters, and automate payment processing for a seamless customer experience.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the company logo with a minimum height of 24px for web.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings.\n- **Brand Voice**: Maintain a professional, trustworthy, and approachable tone in UI copy.\n- **Typography Hierarchy**: Establish consistent heading levels (H1-H6) with clear font weights and sizes.\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessible contrast ratios.\n- **Semantic Colors**: Assign colors for Success (green), Warning (amber), Error (red), and Info (blue).\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure WCAG AA compliance for text contrast ratios.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface, favoring system fonts for performance.\n- **Font Weights**: Specify Regular (400), Medium (500), Semi-bold (600), and Bold (700).\n- **Line Heights**: Maintain 1.2 for headings and 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px).\n- **H2**: Employ for section headers (24-32px).\n- **H3**: Utilize for subsection headers (20-24px).\n- **Body**: Apply for primary content (14-16px).\n- **Caption**: Use for supporting text (12-14px).\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins.\n- **Tablet**: Utilize an 8-column grid with 20px gutters.\n- **Mobile**: Employ a 4-column grid with 16px gutters.\n- **Container Max-width**: Set at 1200px for optimal readability.\n\n### Spacing System\n- **Base Unit**: Use 8px increments for consistent spacing.\n- **Component Padding**: Ensure internal spacing for visual consistency.\n- **Section Margins**: Maintain vertical rhythm between content blocks.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n\n#### Primary Navigation\n- **Desktop**: Horizontal top navigation with dropdown menus.\n- **Mobile**: Hamburger menu with a slide-out drawer.\n- **Active States**: Provide clear visual indication of the current page/section.\n- **Accessibility**: Ensure proper ARIA labels and keyboard navigation support.\n\n#### Breadcrumbs\n- **Format**: Display as Home > Section > Subsection > Current Page.\n- **Separators**: Use forward slash (/) or chevron (>) for clarity.\n- **Clickable Elements**: Allow interaction with all except the current page.\n\n### Form Components\n\n#### Input Fields\n- **Height**: Maintain a minimum of 44px for touch targets.\n- **States**: Include Default, Focus, Error, Disabled, and Success states.\n- **Labels**: Keep labels visible and positioned above inputs.\n- **Placeholder Text**: Provide helpful examples, not instructions.\n- **Error Messaging**: Offer clear and actionable feedback below inputs.\n\n#### Buttons\n- **Primary Button**: Ensure high contrast for main actions.\n- **Secondary Button**: Use lower contrast for secondary actions.\n- **Tertiary Button**: Text-only option for less critical actions.\n- **Sizes**: Offer Small (32px), Medium (40px), and Large (48px) variants.\n- **States**: Define Default, Hover, Active, Disabled, and Loading states.\n\n#### Form Validation\n- **Inline Validation**: Provide real-time feedback for individual fields.\n- **Error Prevention**: Implement input constraints and helpful formatting.\n- **Success States**: Confirm correct inputs with positive feedback.\n\n### Data Display Components\n\n#### Tables\n- **Header Styling**: Bold text with background color differentiation.\n- **Row Styling**: Alternate background colors for readability.\n- **Sorting**: Include clear visual indicators for sortable columns.\n- **Pagination**: Display entries info and navigation controls.\n- **Responsive**: Ensure responsiveness for mobile viewing.\n\n#### Cards\n- **Shadow Elevation**: Apply subtle drop shadows (2-4px blur).\n- **Border Radius**: Maintain consistent corner rounding (4-8px).\n- **Content Hierarchy**: Clearly distinguish title, body, and action areas.\n- **Hover States**: Provide subtle elevation or border changes for interactivity.\n\n### Feedback Components\n\n#### Alerts and Notifications\n- **Success**: Use a green background with a checkmark icon.\n- **Warning**: Employ an amber background with a warning icon.\n- **Error**: Signal errors with a red background and error icon.\n- **Info**: Provide information with a blue background and info icon.\n- **Positioning**: Display toast notifications in the top-right corner and inline alerts contextually.\n\n#### Loading States\n- **Skeleton Screens**: Utilize gray placeholders matching content structure.\n- **Progress Indicators**: Offer linear progress for known processes and circular for unknown.\n- **Spinners**: Use sparingly, preferring skeleton screens for loading feedback.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Test all color combinations for accessibility.\n- **Color Independence**: Avoid relying solely on color to convey information.\n- **Focus Indicators**: Ensure visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- **Tab Order**: Establish a logical flow through interactive elements.\n- **Skip Links**: Include \"Skip to main content\" for screen reader users.\n- **Escape Functionality**: Enable closing modals and dropdowns with the Escape key.\n\n### Screen Reader Support\n- **ARIA Labels**: Provide descriptive labels for interactive elements.\n- **Heading Structure**: Maintain a proper H1-H6 hierarchy for screen readers.\n- **Alt Text**: Include meaningful descriptions for images and icons.\n- **Form Labels**: Explicitly associate labels with form controls.\n\n### Motor Accessibility\n- **Touch Targets**: Ensure a minimum of 44px x 44px clickable areas.\n- **Spacing**: Provide adequate space between interactive elements.\n- **Timeout Warnings**: Alert users for sessions with time limits.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile**: Range from 320px to 767px.\n- **Tablet**: Range from 768px to 1023px.\n- **Desktop**: Range from 1024px to 1199px.\n- **Large Desktop**: 1200px and above.\n\n### Mobile-First Approach\n- **Progressive Enhancement**: Begin with mobile design and enhance for larger screens.\n- **Touch Interactions**: Incorporate swipe gestures, tap targets, and thumb-friendly navigation.\n- **Content Priority**: Ensure essential content is visible without scrolling.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- **Duration**: Keep transitions between 200-300ms for a smooth user experience.\n- **Easing**: Use ease-out for entrances and ease-in for exits.\n- **Button Feedback**: Provide subtle scale or color changes on interaction.\n- **Form Feedback**: Ensure smooth transitions between states.\n\n### Page Transitions\n- **Loading States**: Display progress for actions taking over 1 second.\n- **Content Updates**: Use smooth fade or slide transitions for content changes.\n- **Error Handling**: Offer clear visual feedback without abrupt interruptions.\n\n## 8. Icon System\n\n### Icon Library\n- **Style**: Maintain consistent stroke width and corner radius for icons.\n- **Sizes**: Provide standard sizes of 16px, 20px, 24px, and 32px.\n- **Usage**: Use functional icons for navigation and decorative icons sparingly.\n- **Accessibility**: Include alt text or ARIA labels for meaningful icons.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- **Clarity**: Use simple, direct language for better understanding.\n- **Consistency**: Employ standard terminology across the application.\n- **Actionable**: Provide clear next steps for users to follow.\n- **Inclusive**: Ensure gender-neutral and accessible language.\n\n### Error Messages\n- **Specific**: Explain precisely what went wrong in error messages.\n- **Helpful**: Offer steps to resolve issues in a user-friendly manner.\n- **Human**: Avoid technical jargon in error messages.\n- **Positioning**: Place error messages near relevant inputs or actions.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- **Formats**: Opt for WebP with fallbacks and SVG for icons.\n- **Sizing**: Provide multiple resolutions for different screen densities.\n- **Lazy Loading**: Implement for images below the fold to enhance performance.\n\n### Asset Management\n- **Component Reusability**: Maximize reuse of design components for efficiency.\n- **Consistent Naming**: Use clear, descriptive names for all elements.\n- **Style Organization**: Group colors, typography, and spacing logically for easy management.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Ensure all components adhere to the established design system.\n- [ ] Verify color contrast meets WCAG AA standards.\n- [ ] Confirm interactive elements meet minimum size requirements.\n- [ ] Maintain consistency in typography hierarchy.\n- [ ] Define responsive behavior for all breakpoints.\n\n### Accessibility Audit\n- [ ] Validate keyboard navigation for all interactive elements.\n- [ ] Verify screen reader compatibility.\n- [ ] Check for color-blind friendly color combinations.\n- [ ] Provide alternative text for all images.\n- [ ] Associate form labels correctly.\n\n### Brand Consistency\n- [ ] Adhere to brand guidelines for logo usage.\n- [ ] Match color palette with brand standards.\n- [ ] Reflect brand personality through typography.\n- [ ] Maintain consistent voice and tone throughout the application.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Develop example pages showcasing components in context.\n\n--- \n\nImplementation Notes for Figma Make\nComponent Organization: Create a master component library with all variants and states\nAuto-layout Usage: Implement responsive behavior using Figma's auto-layout features\nStyle Management: Use Figma styles for colors, typography, and effects\nDocumentation: Include usage guidelines within component descriptions\nTesting: Create example pages showing components in context",
    "type": "design_guidelines",
    "id": 13,
    "timestamp": "2025-08-25T17:56:04.105145"
  },
  {
    "input": "I require an intelligent insurance claims processing system that automates claim evaluation, fraud detection, and settlement processes. The system should include:\n\n• Automated claim intake from multiple channels (web, mobile, phone, email)\n• AI-powered damage assessment using image recognition and ML algorithms\n• Integration with third-party assessors, repair shops, and medical providers\n• Real-time fraud detection using pattern analysis and risk scoring\n• Workflow automation for claim routing, approval, and settlement\n• Customer communication portal with status updates and document sharing\n• Integration with policy management systems for coverage verification\n• Regulatory compliance for insurance industry standards\n• Analytics dashboard for claim trends, fraud patterns, and performance metrics\n• Mobile app for field adjusters with offline capability\n• Automated payment processing and settlement reconciliation\n\nThe system must handle high claim volumes, ensure regulatory compliance, and provide excellent customer experience throughout the claims lifecycle.",
    "guidelines": "Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an advanced insurance claims processing system that streamlines claim evaluation, fraud detection, and settlement processes. The system should enhance operational efficiency, ensure regulatory compliance, and deliver a seamless customer experience across all touchpoints.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the company logo with a minimum height of 24px for web applications.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with meaningful associations.\n- **Brand Voice**: Maintain a professional, trustworthy, and approachable tone in all UI copy.\n- **Typography Hierarchy**: Establish consistent heading levels (H1-H6) with clear font weights and sizes.\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessible contrast ratios.\n- **Semantic Colors**: Assign colors like Success (green), Warning (amber), Error (red), Info (blue) for clarity.\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure WCAG AA compliance for text readability.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface, with system fonts recommended for optimal performance.\n- **Font Weights**: Specify Regular (400), Medium (500), Semi-bold (600), Bold (700) for consistency.\n- **Line Heights**: Maintain 1.2 for headings and 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px).\n- **H2**: Ideal for section headers (24-32px).\n- **H3**: Suitable for subsection headers (20-24px).\n- **Body**: Primary content text should be 14-16px.\n- **Caption**: Supporting text can range from 12-14px.\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins.\n- **Tablet**: Utilize an 8-column grid with 20px gutters.\n- **Mobile**: Opt for a 4-column grid with 16px gutters.\n- **Container Max-width**: Set at 1200px for optimal readability.\n\n### Spacing System\n- **Base Unit**: Use 8px increments for consistent spacing.\n- **Component Padding**: Ensure internal spacing for visual consistency.\n- **Section Margins**: Maintain vertical rhythm between content blocks.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n\n#### Primary Navigation\n- **Desktop**: Horizontal top navigation with dropdown menus.\n- **Mobile**: Hamburger menu with slide-out drawer.\n- **Active States**: Clearly indicate the current page/section.\n- **Accessibility**: Provide proper ARIA labels and support keyboard navigation.\n\n#### Breadcrumbs\n- **Format**: Follow Home > Section > Subsection > Current Page structure.\n- **Separators**: Choose between forward slash (/) or chevron (>) for clarity.\n- **Clickable Elements**: All elements except the current page should be clickable.\n\n### Form Components\n\n#### Input Fields\n- **Height**: Maintain a minimum of 44px for touch targets.\n- **States**: Include Default, Focus, Error, Disabled, Success states.\n- **Labels**: Keep labels visible and positioned above inputs.\n- **Placeholder Text**: Provide examples, not instructions.\n- **Error Messaging**: Offer clear and actionable feedback below inputs.\n\n#### Buttons\n- **Primary Button**: High contrast for main actions.\n- **Secondary Button**: Lower contrast for secondary actions.\n- **Tertiary Button**: Text-only for less critical actions.\n- **Sizes**: Offer Small (32px), Medium (40px), Large (48px) options.\n- **States**: Define Default, Hover, Active, Disabled, Loading states.\n\n#### Form Validation\n- **Inline Validation**: Provide real-time feedback for individual fields.\n- **Error Prevention**: Implement input constraints and helpful formatting.\n- **Success States**: Confirm correct inputs with positive feedback.\n\n### Data Display Components\n\n#### Tables\n- **Header Styling**: Differentiate with bold text and background colors.\n- **Row Styling**: Use alternating backgrounds for readability.\n- **Sorting**: Clearly indicate sortable columns.\n- **Pagination**: Display entries info and navigation controls.\n- **Responsive**: Ensure responsiveness on mobile devices.\n\n#### Cards\n- **Shadow Elevation**: Apply subtle drop shadows (2-4px blur).\n- **Border Radius**: Maintain consistent corner rounding (4-8px).\n- **Content Hierarchy**: Clearly define title, body, and action areas.\n- **Hover States**: Include subtle elevation or border changes.\n\n### Feedback Components\n\n#### Alerts and Notifications\n- **Success**: Green background with checkmark icon.\n- **Warning**: Amber background with warning icon.\n- **Error**: Red background with error icon.\n- **Info**: Blue background with info icon.\n- **Positioning**: Toast notifications in top-right, inline alerts contextually.\n\n#### Loading States\n- **Skeleton Screens**: Use gray placeholders matching content structure.\n- **Progress Indicators**: Linear for known progress, circular for unknown.\n- **Spinners**: Use sparingly, prefer skeleton screens.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Test all color combinations for readability.\n- **Color Independence**: Avoid relying solely on color for conveying information.\n- **Focus Indicators**: Ensure visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- **Tab Order**: Maintain a logical flow through interactive elements.\n- **Skip Links**: Include \"Skip to main content\" for screen readers.\n- **Escape Functionality**: Allow closing modals and dropdowns with the Escape key.\n\n### Screen Reader Support\n- **ARIA Labels**: Provide descriptive labels for interactive elements.\n- **Heading Structure**: Follow proper H1-H6 hierarchy for screen readers.\n- **Alt Text**: Include meaningful descriptions for images and icons.\n- **Form Labels**: Explicitly associate labels with form controls.\n\n### Motor Accessibility\n- **Touch Targets**: Ensure a minimum of 44px x 44px clickable areas.\n- **Spacing**: Provide adequate space between interactive elements.\n- **Timeout Warnings**: Include warnings for sessions with time limits.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile**: 320px - 767px\n- **Tablet**: 768px - 1023px\n- **Desktop**: 1024px - 1199px\n- **Large Desktop**: 1200px+\n\n### Mobile-First Approach\n- **Progressive Enhancement**: Begin with mobile design and enhance for larger screens.\n- **Touch Interactions**: Implement swipe gestures, tap targets, and thumb-friendly navigation.\n- **Content Priority**: Ensure essential content is visible without scrolling.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- **Duration**: Keep transitions between 200-300ms for smooth interactions.\n- **Easing**: Use ease-out for entrances and ease-in for exits.\n- **Button Feedback**: Apply subtle scale or color changes on interaction.\n- **Form Feedback**: Ensure smooth transitions between states.\n\n### Page Transitions\n- **Loading States**: Show progress for actions taking more than 1 second.\n- **Content Updates**: Use smooth fade or slide transitions.\n- **Error Handling**: Provide clear visual feedback without interruptions.\n\n## 8. Icon System\n\n### Icon Library\n- **Style**: Maintain consistent stroke width and corner radius.\n- **Sizes**: Offer standard sizes like 16px, 20px, 24px, 32px.\n- **Usage**: Use functional icons for navigation, sparingly for decorative purposes.\n- **Accessibility**: Include Alt text or ARIA labels for meaningful icons.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- **Clarity**: Use simple and direct language.\n- **Consistency**: Maintain standard terminology across the application.\n- **Actionable**: Provide clear next steps for users.\n- **Inclusive**: Ensure gender-neutral and accessible language.\n\n### Error Messages\n- **Specific**: Explain precisely what went wrong.\n- **Helpful**: Offer steps to resolve the issue.\n- **Human**: Avoid technical jargon in error messages.\n- **Positioning**: Display near the relevant input or action.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- **Formats**: Opt for WebP with fallbacks, SVG for icons.\n- **Sizing**: Provide multiple resolutions for different screen densities.\n- **Lazy Loading**: Implement for images below the fold.\n\n### Asset Management\n- **Component Reusability**: Maximize reuse of design components.\n- **Consistent Naming**: Use clear, descriptive names for all elements.\n- **Style Organization**: Group colors, typography, and spacing logically.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Ensure all components adhere to the established design system.\n- [ ] Verify color contrast meets WCAG AA standards.\n- [ ] Confirm interactive elements meet minimum size requirements.\n- [ ] Maintain consistency in typography hierarchy.\n- [ ] Define responsive behavior for all breakpoints.\n\n### Accessibility Audit\n- [ ] Validate keyboard navigation for all interactive elements.\n- [ ] Verify screen reader compatibility.\n- [ ] Check for color-blind friendly color combinations.\n- [ ] Provide alternative text for all images.\n- [ ] Associate form labels correctly.\n\n### Brand Consistency\n- [ ] Adhere to brand guidelines for logo usage.\n- [ ] Match color palette with brand standards.\n- [ ] Reflect brand personality through typography.\n- [ ] Maintain consistent voice and tone throughout.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Develop example pages showcasing components in context.\n\n---\nImplementation Notes for Figma Make\nComponent Organization: Create a master component library with all variants and states\nAuto-layout Usage: Implement responsive behavior using Figma's auto-layout features\nStyle Management: Use Figma styles for colors, typography, and effects\nDocumentation: Include usage guidelines within component descriptions\nTesting: Create example pages showing components in context",
    "type": "design_guidelines",
    "id": 14,
    "timestamp": "2025-10-28T10:54:41.730Z"
  },
  {
    "input": "I need a full-featured e-commerce platform that supports modern retail operations across multiple channels. The system should include:\n\n• Product catalog management with variants, pricing, and inventory tracking\n• Multi-channel selling (web, mobile app, social commerce, marketplaces)\n• Shopping cart and checkout optimization with multiple payment options\n• Customer account management with order history and preferences\n• Inventory management with real-time stock levels and automated reordering\n• Order fulfillment workflow with shipping integration and tracking\n• Customer service tools including live chat, returns, and refunds\n• Marketing automation with personalized recommendations and email campaigns\n• Analytics and reporting for sales, customer behavior, and inventory performance\n• SEO optimization and content management capabilities\n• Mobile-responsive design with progressive web app features\n• Integration with ERP, CRM, and accounting systems\n\nThe platform must handle high traffic loads, provide excellent user experience, and support business growth with scalable architecture.",
    "guidelines": "### Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nCreate a robust e-commerce platform that caters to modern retail operations across various channels, ensuring seamless user experiences and scalable architecture to support business growth.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the company logo with a minimum height of 24px for web.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings.\n- **Brand Voice**: Maintain a professional, trustworthy, and approachable tone in all UI copy.\n- **Typography Hierarchy**: Establish clear heading levels (H1-H6) with consistent font weights and sizes.\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessible contrast ratios.\n- **Semantic Colors**: Assign colors for Success (green), Warning (amber), Error (red), Info (blue).\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure WCAG AA compliance for text contrast ratios.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface with system fonts recommended for performance.\n- **Font Weights**: Specify Regular (400), Medium (500), Semi-bold (600), Bold (700).\n- **Line Heights**: Set to 1.2 for headings and 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px).\n- **H2**: Employ for section headers (24-32px).\n- **H3**: Apply for subsection headers (20-24px).\n- **Body**: Utilize for primary content (14-16px).\n- **Caption**: Use for supporting text (12-14px).\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins.\n- **Tablet**: Utilize an 8-column grid with 20px gutters.\n- **Mobile**: Employ a 4-column grid with 16px gutters.\n- **Container Max-width**: Set to 1200px for optimal readability.\n\n### Spacing System\n- **Base Unit**: Use 8px increments for consistent spacing.\n- **Component Padding**: Ensure internal spacing for visual consistency.\n- **Section Margins**: Maintain vertical rhythm between content blocks.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n\n#### Primary Navigation\n- **Desktop**: Horizontal top navigation with dropdown menus.\n- **Mobile**: Hamburger menu with slide-out drawer.\n- **Active States**: Provide clear visual indication of the current page/section.\n- **Accessibility**: Ensure proper ARIA labels and keyboard navigation support.\n\n#### Breadcrumbs\n- **Format**: Display as Home > Section > Subsection > Current Page.\n- **Separators**: Use forward slash (/) or chevron (>) for clarity.\n- **Clickable Elements**: Allow interaction with all elements except the current page.\n\n### Form Components\n\n#### Input Fields\n- **Height**: Maintain a minimum of 44px for touch targets.\n- **States**: Include Default, Focus, Error, Disabled, Success states.\n- **Labels**: Keep labels always visible and positioned above inputs.\n- **Placeholder Text**: Provide helpful examples, not instructions.\n- **Error Messaging**: Offer clear and actionable feedback below inputs.\n\n#### Buttons\n- **Primary Button**: Ensure high contrast for main actions.\n- **Secondary Button**: Use lower contrast for secondary actions.\n- **Tertiary Button**: Text-only option for less critical actions.\n- **Sizes**: Offer Small (32px), Medium (40px), Large (48px) variants.\n- **States**: Define Default, Hover, Active, Disabled, Loading states.\n\n#### Form Validation\n- **Inline Validation**: Provide real-time feedback for individual fields.\n- **Error Prevention**: Implement input constraints and helpful formatting.\n- **Success States**: Confirm correct inputs with positive feedback.\n\n### Data Display Components\n\n#### Tables\n- **Header Styling**: Use bold text and background color differentiation.\n- **Row Styling**: Alternate backgrounds for improved readability.\n- **Sorting**: Include clear visual indicators for sortable columns.\n- **Pagination**: Display entries info and navigation controls.\n- **Responsive**: Ensure responsiveness on mobile devices.\n\n#### Cards\n- **Shadow Elevation**: Apply subtle drop shadows (2-4px blur).\n- **Border Radius**: Maintain consistent corner rounding (4-8px).\n- **Content Hierarchy**: Clearly distinguish title, body, and action areas.\n- **Hover States**: Implement subtle elevation or border changes for interactivity.\n\n### Feedback Components\n\n#### Alerts and Notifications\n- **Success**: Use green background with checkmark icon.\n- **Warning**: Apply amber background with warning icon.\n- **Error**: Utilize red background with error icon.\n- **Info**: Display blue background with info icon.\n- **Positioning**: Position toast notifications in the top-right and inline alerts contextually.\n\n#### Loading States\n- **Skeleton Screens**: Use gray placeholders matching content structure.\n- **Progress Indicators**: Employ linear indicators for known progress and circular for unknown.\n- **Spinners**: Use sparingly and prefer skeleton screens.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Test all color combinations for accessibility.\n- **Color Independence**: Avoid relying solely on color to convey information.\n- **Focus Indicators**: Ensure visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- **Tab Order**: Establish a logical flow through interactive elements.\n- **Skip Links**: Include \"Skip to main content\" for screen readers.\n- **Escape Functionality**: Allow closing modals and dropdowns with the Escape key.\n\n### Screen Reader Support\n- **ARIA Labels**: Provide descriptive labels for interactive elements.\n- **Heading Structure**: Maintain a proper H1-H6 hierarchy for screen readers.\n- **Alt Text**: Include meaningful descriptions for images and icons.\n- **Form Labels**: Explicitly associate labels with form controls.\n\n### Motor Accessibility\n- **Touch Targets**: Ensure minimum 44px x 44px clickable areas.\n- **Spacing**: Maintain adequate space between interactive elements.\n- **Timeout Warnings**: Include warnings for sessions with time limits.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile**: Range from 320px to 767px.\n- **Tablet**: Range from 768px to 1023px.\n- **Desktop**: Range from 1024px to 1199px.\n- **Large Desktop**: 1200px and above.\n\n### Mobile-First Approach\n- **Progressive Enhancement**: Begin with mobile design and enhance for larger screens.\n- **Touch Interactions**: Implement swipe gestures, tap targets, and thumb-friendly navigation.\n- **Content Priority**: Ensure essential content is visible without scrolling.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- **Duration**: Keep transitions between 200-300ms for smooth interactions.\n- **Easing**: Use ease-out for entrances and ease-in for exits.\n- **Button Feedback**: Provide subtle scale or color changes on interaction.\n- **Form Feedback**: Ensure smooth transitions between states.\n\n### Page Transitions\n- **Loading States**: Show progress for actions taking more than 1 second.\n- **Content Updates**: Implement smooth fade or slide transitions.\n- **Error Handling**: Offer clear visual feedback without abrupt interruptions.\n\n## 8. Icon System\n\n### Icon Library\n- **Style**: Maintain consistent stroke width and corner radius.\n- **Sizes**: Standardize sizes to 16px, 20px, 24px, 32px.\n- **Usage**: Use functional icons for navigation and decorative icons sparingly.\n- **Accessibility**: Provide Alt text or ARIA labels for meaningful icons.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- **Clarity**: Use simple and direct language.\n- **Consistency**: Ensure standard terminology across the application.\n- **Actionable**: Provide clear next steps for users.\n- **Inclusive**: Use gender-neutral and accessible language.\n\n### Error Messages\n- **Specific**: Explain precisely what went wrong.\n- **Helpful**: Offer steps to resolve the issue.\n- **Human**: Avoid technical jargon in error messages.\n- **Positioning**: Display near the relevant input or action.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- **Formats**: Opt for WebP with fallbacks and SVG for icons.\n- **Sizing**: Provide multiple resolutions for different screen densities.\n- **Lazy Loading**: Implement for images below the fold.\n\n### Asset Management\n- **Component Reusability**: Maximize reuse of design components.\n- **Consistent Naming**: Use clear, descriptive names for all elements.\n- **Style Organization**: Group colors, typography, and spacing logically.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Ensure all components adhere to the established design system.\n- [ ] Verify color contrast meets WCAG AA standards.\n- [ ] Confirm interactive elements meet minimum size requirements.\n- [ ] Maintain consistency in typography hierarchy.\n- [ ] Define responsive behavior for all breakpoints.\n\n### Accessibility Audit\n- [ ] Validate keyboard navigation for all interactive elements.\n- [ ] Verify screen reader compatibility.\n- [ ] Check for color-blind friendly color combinations.\n- [ ] Provide alternative text for all images.\n- [ ] Associate form labels correctly.\n\n### Brand Consistency\n- [ ] Adhere to brand guidelines for logo usage.\n- [ ] Match color palette with brand standards.\n- [ ] Reflect brand personality through typography.\n- [ ] Maintain consistent voice and tone throughout.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Develop example pages showcasing components in context.\n\n--- \n\nImplementation Notes for Figma Make\nComponent Organization: Create a master component library with all variants and states\nAuto-layout Usage: Implement responsive behavior using Figma's auto-layout features\nStyle Management: Use Figma styles for colors, typography, and effects\nDocumentation: Include usage guidelines within component descriptions\nTesting: Create example pages showing components in context",
    "type": "design_guidelines",
    "id": 15,
    "timestamp": "2025-10-28T11:43:35.972Z"
  },
  {
    "input": "I need a comprehensive banking system that handles customer account management, transaction processing, and regulatory compliance. The system should support:\n\n• Multi-currency account management with real-time balance tracking\n• Secure transaction processing with fraud detection mechanisms\n• Integration with payment gateways and interbank networks\n• Regulatory compliance for KYC, AML, and financial reporting\n• Real-time transaction monitoring and alerts\n• Customer onboarding with digital identity verification\n• Loan origination and management workflows\n• Credit scoring and risk assessment capabilities\n• Automated reporting for regulatory bodies\n• Mobile and web banking interfaces with strong authentication\n\nThe system must ensure ACID compliance, handle high transaction volumes, and maintain audit trails for all financial operations.",
    "guidelines": "### Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop a robust banking system that encompasses customer account management, transaction processing, and regulatory compliance. The system should facilitate multi-currency account handling, secure transactions, regulatory adherence, real-time monitoring, and diverse banking interfaces with stringent authentication.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the bank's logo with a minimum size of 24px for web applications.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes reflecting trust and professionalism.\n- **Brand Voice**: Maintain a tone that is professional, trustworthy, and approachable across all user interfaces.\n- **Typography Hierarchy**: Establish consistent heading levels (H1-H6) for clear information structuring.\n\n### Color System\n- **Primary Colors**: Define 2-3 primary brand colors with accessible contrast ratios.\n- **Semantic Colors**: Assign meanings to colors like Success (green), Warning (amber), Error (red), and Info (blue).\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure compliance with WCAG AA standards for text contrast.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Opt for an enterprise-grade typeface, favoring system fonts for performance.\n- **Font Weights**: Include Regular (400), Medium (500), Semi-bold (600), and Bold (700).\n- **Line Heights**: Maintain 1.2 for headings and 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px).\n- **H2**: Employ for section headers (24-32px).\n- **H3**: Utilize for subsection headers (20-24px).\n- **Body**: Primary content text should be 14-16px.\n- **Caption**: Supporting text should range from 12-14px.\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins.\n- **Tablet**: Utilize an 8-column grid with 20px gutters.\n- **Mobile**: Employ a 4-column grid with 16px gutters.\n- **Container Max-width**: Set at 1200px for optimal readability.\n\n### Spacing System\n- **Base Unit**: Maintain an 8px base unit for consistent spacing.\n- **Component Padding**: Ensure internal spacing consistency.\n- **Section Margins**: Establish vertical rhythm between content blocks.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n\n#### Primary Navigation\n- **Desktop**: Horizontal top navigation with dropdown menus.\n- **Mobile**: Hamburger menu with slide-out drawer.\n- **Active States**: Clearly indicate the current page/section.\n- **Accessibility**: Provide proper ARIA labels and support keyboard navigation.\n\n#### Breadcrumbs\n- **Format**: Follow the Home > Section > Subsection > Current Page structure.\n- **Separators**: Use forward slash (/) or chevron (>) for clarity.\n- **Clickable Elements**: All elements except the current page.\n\n### Form Components\n\n#### Input Fields\n- **Height**: Maintain a minimum of 44px for touch targets.\n- **States**: Include Default, Focus, Error, Disabled, and Success states.\n- **Labels**: Keep labels visible and positioned above inputs.\n- **Placeholder Text**: Offer examples, not instructions.\n- **Error Messaging**: Provide clear feedback below inputs.\n\n#### Buttons\n- **Primary Button**: High contrast for main actions.\n- **Secondary Button**: Lower contrast for secondary actions.\n- **Tertiary Button**: Text-only for less critical actions.\n- **Sizes**: Offer Small (32px), Medium (40px), and Large (48px) options.\n- **States**: Include Default, Hover, Active, Disabled, and Loading states.\n\n#### Form Validation\n- **Inline Validation**: Provide real-time feedback for individual fields.\n- **Error Prevention**: Implement input constraints and formatting assistance.\n- **Success States**: Confirm correct inputs with positive feedback.\n\n### Data Display Components\n\n#### Tables\n- **Header Styling**: Bold text with background color differentiation.\n- **Row Styling**: Alternate background colors for readability.\n- **Sorting**: Include clear indicators for sortable columns.\n- **Pagination**: Display entries info and navigation controls.\n- **Responsive**: Ensure mobile-friendly display options.\n\n#### Cards\n- **Shadow Elevation**: Apply subtle drop shadows for depth.\n- **Border Radius**: Maintain consistent corner rounding.\n- **Content Hierarchy**: Clearly distinguish title, body, and action areas.\n- **Hover States**: Implement subtle elevation or border changes.\n\n### Feedback Components\n\n#### Alerts and Notifications\n- **Success**: Green background with checkmark icon.\n- **Warning**: Amber background with warning icon.\n- **Error**: Red background with error icon.\n- **Info**: Blue background with info icon.\n- **Positioning**: Display toast notifications in the top-right and inline alerts contextually.\n\n#### Loading States\n- **Skeleton Screens**: Use gray placeholders matching content structure.\n- **Progress Indicators**: Linear for known progress, circular for unknown.\n- **Spinners**: Limit usage and prefer skeleton screens.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- **Contrast Ratios**: Test all color combinations for accessibility.\n- **Color Independence**: Avoid relying solely on color for conveying information.\n- **Focus Indicators**: Ensure visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- **Tab Order**: Maintain a logical flow through interactive elements.\n- **Skip Links**: Include \"Skip to main content\" for screen readers.\n- **Escape Functionality**: Enable closing modals and dropdowns with the Escape key.\n\n### Screen Reader Support\n- **ARIA Labels**: Provide descriptive labels for interactive elements.\n- **Heading Structure**: Implement a proper H1-H6 hierarchy.\n- **Alt Text**: Offer meaningful descriptions for images and icons.\n- **Form Labels**: Explicitly associate labels with form controls.\n\n### Motor Accessibility\n- **Touch Targets**: Ensure clickable areas are at least 44px x 44px.\n- **Spacing**: Provide adequate space between interactive elements.\n- **Timeout Warnings**: Include alerts for sessions with time limits.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- **Mobile**: 320px - 767px\n- **Tablet**: 768px - 1023px\n- **Desktop**: 1024px - 1199px\n- **Large Desktop**: 1200px+\n\n### Mobile-First Approach\n- **Progressive Enhancement**: Begin with mobile design and enhance for larger screens.\n- **Touch Interactions**: Incorporate swipe gestures, tap targets, and user-friendly navigation.\n- **Content Priority**: Ensure critical content is visible without scrolling.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- **Duration**: Keep transitions between 200-300ms.\n- **Easing**: Use ease-out for entrances and ease-in for exits.\n- **Button Feedback**: Provide subtle scale or color changes on interaction.\n- **Form Feedback**: Ensure smooth transitions between states.\n\n### Page Transitions\n- **Loading States**: Display progress for actions taking over 1 second.\n- **Content Updates**: Use smooth fade or slide transitions.\n- **Error Handling**: Offer clear visual feedback without interruptions.\n\n## 8. Icon System\n\n### Icon Library\n- **Style**: Maintain consistent stroke width and corner radius.\n- **Sizes**: Include standard sizes like 16px, 20px, 24px, and 32px.\n- **Usage**: Functional icons for navigation, sparingly decorative icons.\n- **Accessibility**: Provide Alt text or ARIA labels for meaningful icons.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- **Clarity**: Use simple, direct language.\n- **Consistency**: Employ standard terminology throughout the application.\n- **Actionable**: Offer clear next steps for users.\n- **Inclusive**: Ensure gender-neutral and accessible language.\n\n### Error Messages\n- **Specific**: Explain issues clearly.\n- **Helpful**: Provide steps to resolve problems.\n- **Human**: Avoid technical jargon.\n- **Positioning**: Display near relevant inputs or actions.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- **Formats**: Opt for WebP with fallbacks and SVG for icons.\n- **Sizing**: Provide multiple resolutions for different screen densities.\n- **Lazy Loading**: Implement for images below the fold.\n\n### Asset Management\n- **Component Reusability**: Maximize reuse of design components.\n- **Consistent Naming**: Use clear, descriptive names for all elements.\n- **Style Organization**: Group colors, typography, and spacing logically.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- [ ] Ensure all components align with the design system.\n- [ ] Verify color contrast meets WCAG AA standards.\n- [ ] Confirm interactive elements meet size requirements.\n- [ ] Maintain consistency in typography hierarchy.\n- [ ] Define responsive behavior for all breakpoints.\n\n### Accessibility Audit\n- [ ] Validate keyboard navigation for interactive elements.\n- [ ] Verify screen reader compatibility.\n- [ ] Check for color-blind friendly color combinations.\n- [ ] Provide alternative text for all images.\n- [ ] Associate form labels correctly.\n\n### Brand Consistency\n- [ ] Adhere to brand guidelines for logo usage.\n- [ ] Match color palette with brand standards.\n- [ ] Reflect brand personality through typography.\n- [ ] Maintain consistent voice and tone.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Develop example pages showcasing components in context.",
    "type": "design_guidelines",
    "id": 16,
    "timestamp": "2025-10-28T16:39:00.524Z"
  },
  {
    "input": "I need a Medicare management system that handles beneficiary enrollment, claims processing, and provider network management. The system should provide:\n\n• Beneficiary enrollment and eligibility verification with Medicare databases\n• Claims processing workflow with CMS compliance and validation\n• Provider credentialing and network management capabilities\n• Prior authorization workflows for medical procedures and medications\n• Integration with Electronic Health Records (EHR) systems\n• Medicare Advantage plan management and coordination of benefits\n• Prescription drug coverage (Part D) administration\n• Quality reporting and Star Ratings compliance\n• Member portal for benefit information, claims status, and provider search\n• Provider portal for claims submission, status tracking, and payments\n• Analytics for utilization patterns, cost management, and fraud detection\n• HIPAA-compliant data handling and security measures\n\nThe system must integrate with CMS systems, handle complex Medicare regulations, and ensure accurate benefit administration while maintaining member satisfaction.",
    "guidelines": "## Enterprise Application Design Guidelines for Figma Make\n\n### Project Overview\nDevelop a comprehensive Medicare management system to facilitate beneficiary enrollment, claims processing, and provider network management. The system should ensure seamless integration with CMS systems, compliance with Medicare regulations, and exceptional member satisfaction.\n\n### 1. Design System Foundation\n\n#### Brand Identity\n- **Logo Integration**: Incorporate the system logo with a minimum height of 24px for web.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings.\n- **Brand Voice**: Maintain a professional, trustworthy, and approachable tone in all UI copy.\n- **Typography Hierarchy**: Establish clear heading levels (H1-H6) with consistent font weights and sizes.\n\n#### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessibility-compliant contrast ratios.\n- **Semantic Colors**: Assign colors for Success (green), Warning (amber), Error (red), and Info (blue).\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure WCAG AA compliance (4.5:1 for normal text, 3:1 for large text).\n\n### 2. Typography Guidelines\n\n#### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface, with system fonts recommended for performance.\n- **Font Weights**: Specify Regular (400), Medium (500), Semi-bold (600), and Bold (700).\n- **Line Heights**: Set to 1.2 for headings and 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n#### Text Hierarchy\n- **H1**: Use for primary page titles (32-48px).\n- **H2**: Apply for section headers (24-32px).\n- **H3**: Utilize for subsection headers (20-24px).\n- **Body**: Use for primary content (14-16px).\n- **Caption**: Apply for supporting text (12-14px).\n\n### 3. Layout and Grid System\n\n#### Grid Structure\n- **Desktop**: Implement a 12-column grid with 24px gutters and 120px max margins.\n- **Tablet**: Utilize an 8-column grid with 20px gutters.\n- **Mobile**: Implement a 4-column grid with 16px gutters.\n- **Container Max-width**: Set to 1200px for optimal readability.\n\n#### Spacing System\n- **Base Unit**: Use 8px as the base unit and its multiples for consistent spacing.\n- **Component Padding**: Define internal spacing for consistency.\n- **Section Margins**: Ensure vertical rhythm between content blocks.\n\n### 4. Component Library Specifications\n\n#### Navigation Components\n\n##### Primary Navigation\n- **Desktop**: Horizontal top navigation with dropdown menus.\n- **Mobile**: Hamburger menu with a slide-out drawer.\n- **Active States**: Provide clear visual indication of the current page/section.\n- **Accessibility**: Ensure proper ARIA labels and support for keyboard navigation.\n\n#### Breadcrumbs\n- **Format**: Display as Home > Section > Subsection > Current Page.\n- **Separators**: Use forward slash (/) or chevron (>) for differentiation.\n- **Clickable Elements**: Allow clicking on all elements except the current page.\n\n(Continued in next message)",
    "type": "design_guidelines",
    "id": 17,
    "timestamp": "2025-10-29T07:54:54.177Z"
  },
  {
    "input": "I require an intelligent insurance claims processing system that automates claim evaluation, fraud detection, and settlement processes. The system should include:\n\n• Automated claim intake from multiple channels (web, mobile, phone, email)\n• AI-powered damage assessment using image recognition and ML algorithms\n• Integration with third-party assessors, repair shops, and medical providers\n• Real-time fraud detection using pattern analysis and risk scoring\n• Workflow automation for claim routing, approval, and settlement\n• Customer communication portal with status updates and document sharing\n• Integration with policy management systems for coverage verification\n• Regulatory compliance for insurance industry standards\n• Analytics dashboard for claim trends, fraud patterns, and performance metrics\n• Mobile app for field adjusters with offline capability\n• Automated payment processing and settlement reconciliation\n\nThe system must handle high claim volumes, ensure regulatory compliance, and provide excellent customer experience throughout the claims lifecycle.",
    "guidelines": "Enterprise Application Design Guidelines for Figma Make\n\n## Project Overview\nDevelop an intelligent insurance claims processing system that streamlines claim evaluation, fraud detection, and settlement processes. The system should automate workflows, integrate with third parties, ensure regulatory compliance, and enhance customer experience.\n\n## 1. Design System Foundation\n\n### Brand Identity\n- **Logo Integration**: Incorporate the company logo with a minimum height of 24px for web.\n- **Brand Colors**: Define primary, secondary, and neutral color palettes with semantic meanings.\n- **Brand Voice**: Maintain a professional, trustworthy, and approachable tone in UI copy.\n- **Typography Hierarchy**: Establish clear heading levels (H1-H6) with consistent font weights and sizes.\n\n### Color System\n- **Primary Colors**: Define 2-3 main brand colors with accessible contrast ratios.\n- **Semantic Colors**: Assign colors for Success (green), Warning (amber), Error (red), Info (blue).\n- **Neutral Palette**: Utilize grays for backgrounds, borders, and text with a minimum of 9 shades.\n- **Contrast Requirements**: Ensure WCAG AA compliance for text contrast ratios.\n\n## 2. Typography Guidelines\n\n### Font Selection\n- **Primary Font**: Choose an enterprise-grade typeface, with system fonts recommended for performance.\n- **Font Weights**: Specify Regular (400), Medium (500), Semi-bold (600), Bold (700).\n- **Line Heights**: Set 1.2 for headings and 1.4-1.6 for body text.\n- **Font Sizes**: Establish an 8-point scale ranging from 12px to 48px.\n\n### Text Hierarchy\n- Define sizes and styles for H1, H2, H3, Body, and Caption text elements.\n\n## 3. Layout and Grid System\n\n### Grid Structure\n- Define grid layouts for Desktop, Tablet, and Mobile devices.\n- Specify container max-width for optimal readability.\n- Establish spacing guidelines using a base unit of 8px.\n\n### Spacing System\n- Define component padding and section margins for consistency.\n\n## 4. Component Library Specifications\n\n### Navigation Components\n- Design Primary Navigation for Desktop and Mobile.\n- Specify Breadcrumbs format and clickable elements.\n\n### Form Components\n- Define Input Fields, Buttons, and Form Validation requirements.\n\n### Data Display Components\n- Specify Tables, Cards, Alerts, and Loading States design guidelines.\n\n## 5. Web Accessibility (WCAG 2.1 AA Compliance)\n\n### Color and Contrast\n- Ensure all color combinations meet contrast ratios.\n- Provide visible focus states for keyboard navigation.\n\n### Keyboard Navigation\n- Define tab order, skip links, and escape functionality.\n\n### Screen Reader Support\n- Include ARIA labels, heading structure, alt text, and form labels.\n\n### Motor Accessibility\n- Ensure touch targets and spacing meet accessibility standards.\n\n## 6. Responsive Design Principles\n\n### Breakpoints\n- Define breakpoints for Mobile, Tablet, Desktop, and Large Desktop.\n\n### Mobile-First Approach\n- Implement touch interactions and prioritize content visibility.\n\n## 7. Interaction and Animation Guidelines\n\n### Micro-interactions\n- Specify duration, easing, and feedback for interactions.\n\n### Page Transitions\n- Define loading states, content updates, and error handling.\n\n## 8. Icon System\n\n### Icon Library\n- Establish consistent style, sizes, usage, and accessibility for icons.\n\n## 9. Content Guidelines\n\n### Writing Principles\n- Ensure clarity, consistency, actionability, and inclusivity in content.\n\n### Error Messages\n- Design specific, helpful, human, and well-positioned error messages.\n\n## 10. Performance Considerations\n\n### Image Optimization\n- Optimize image formats, sizing, and lazy loading.\n\n### Asset Management\n- Focus on component reusability, naming conventions, and style organization.\n\n## 11. Quality Assurance Checklist\n\n### Pre-Development Review\n- Check components, color contrast, interactive elements, typography, and responsiveness.\n\n### Accessibility Audit\n- Verify keyboard navigation, screen reader compatibility, color-blind friendly colors, alt text, and form labels.\n\n### Brand Consistency\n- Ensure logo, color palette, typography, voice, and tone consistency.\n\n## Implementation Notes for Figma Make\n\n1. **Component Organization**: Create a master component library with all variants and states.\n2. **Auto-layout Usage**: Implement responsive behavior using Figma's auto-layout features.\n3. **Style Management**: Utilize Figma styles for colors, typography, and effects.\n4. **Documentation**: Include usage guidelines within component descriptions.\n5. **Testing**: Create example pages demonstrating components in context.",
    "type": "design_guidelines",
    "id": 18,
    "timestamp": "2025-10-29T09:24:20.843Z"
  }
]
